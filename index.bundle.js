(()=>{"use strict";var e,t={16:(e,t,n)=>{var r=n(294),a=n(745),c=n(711),i=n(974),l=n(625),o=n(436);const s=function(e){var t="logo logo-".concat(e.color," logo-").concat(e.size);return"true"===e.clickable?r.createElement(c.rU,{to:"/",className:t},r.createElement("span",{className:"logo-text"},r.createElement("i",null,"<SLH",r.createElement("span",null,"/"),">"))):r.createElement("div",{className:t},r.createElement("span",{className:"logo-text"},r.createElement("i",null,"<SLH",r.createElement("span",null,"/"),">")))};function m(e){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m(e)}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t){return d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},d(e,t)}function p(e,t){if(t&&("object"===m(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return h(e)}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},f(e)}const E=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&d(e,t)}(E,e);var t,n,a,i,m=(a=E,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(a);if(i){var n=f(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return p(this,e)});function E(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,E),(t=m.call(this,e)).state={isToggleOn:!1},t.handleClick=t.handleClick.bind(h(t)),t}return t=E,(n=[{key:"handleClick",value:function(){this.setState((function(e){return{isToggleOn:!e.isToggleOn}}))}},{key:"render",value:function(){return r.createElement("header",{className:"site-header container"},r.createElement("div",{className:"header-left"},r.createElement(s,{clickable:"true",color:"dark",size:"sm"})),r.createElement("div",{className:"header-right"},r.createElement("nav",{className:"main-nav hidden-xs hidden-sm "},r.createElement(c.rU,{to:"/",className:"menu-item menu-item-current"},"Home"),r.createElement(c.rU,{to:"projects",className:"menu-item"},"Projects"),r.createElement(c.rU,{to:"contact",className:"menu-item"},"Contact")),r.createElement("div",{className:(this.state.isToggleOn?"popup-opened":"")+" header-menu hidden-md hidden-lg hidden-xl"},r.createElement("button",{className:"button header-button header-button-menu js-popup",onClick:this.handleClick},r.createElement(l.G,{icon:o.xiG})),r.createElement("div",{className:"popup"},r.createElement("div",{className:"mobile-menu"},r.createElement(c.rU,{to:"/",className:"menu-item menu-item-current"},"Home"),r.createElement(c.rU,{to:"projects",className:"menu-item"},"Projects"),r.createElement(c.rU,{to:"contact",className:"menu-item"},"Contact"))))))}}])&&u(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),E}(r.Component),b=n.p+"images/540239d9f4076c2deb41ad247d9f50df-milo-mcdowell-3027-unsplash.jpg";var g=n(679);const v=function(){return r.createElement("div",{className:"home-cover container"},r.createElement("div",{className:"site-cover u-overlay"},r.createElement(g.LazyLoadImage,{className:"cover-image jarallax-img u-object-fit",src:b,alt:"Wave",width:"1920px",height:"1080px",afterLoad:function(){document.querySelector(".site-cover").classList.add("initialized")}}),r.createElement("div",{className:"cover-content"},r.createElement("div",{className:"cover-logo"},r.createElement(s,{clickable:"false",color:"light",size:"lg"})),r.createElement("div",{className:"cover-description"},"Shou-Li Hsu's personal website. A place to introduce myself and share my thoughts."))))},y=function(){return r.createElement("div",{className:"site-content"},r.createElement("main",{className:"site-main container medium"},r.createElement("div",{className:"post-content gh-content kg-canvas"},r.createElement("h2",{id:"about"},"About"),r.createElement("p",null,"Shou-Li Hsu is a Taiwanese digital circuit designer specialized in CPU design and transistor-level VLSI. His background is in mmWave IC, cell-based digital IC, and full-custom digital IC."),r.createElement("p",null,"He received his bachelor’s degree at National Taiwan University, Taipei, Taiwan, and his master’s degree at University of Michigan, Ann Arbor, MI, USA."),r.createElement("p",null,"He worked in MemryX Inc as an integrated circuit engineer intern. He was also employed in Tron Future Tech as a digital design engineer intern. He is currently employed by Intel as a full-time CPU RTL design engineer in Hillsboro, OR, USA."),r.createElement("h2",{id:"work"},"Work Experience"),r.createElement("div",{className:"work-item"},r.createElement("h3",null,"MemryX Inc"),r.createElement("h4",null,"IC Design Intern | May 2021 – Aug. 2021"),r.createElement("p",null,"Optimized the microarchitecture of the inter-layer communication module in an AI chip and achieved 50% area reduction. Integrated the AI core, ARM Cortex-M3 processor, and peripherals into an SoC and performed chip-level verification.")),r.createElement("div",{className:"work-item"},r.createElement("h3",null,"Tron Future Tech"),r.createElement("h4",null,"Digital Design Intern | June 2020 – Nov. 2020"),r.createElement("p",null,"Prototyped a communication IP on Xilinx FPGAs and integrated it into a transmitter system. Developed single-event upset protection mechanisms for SRAM-based FPGAs.")),r.createElement("h2",{id:"education"},"Education"),r.createElement("div",{className:"education-item"},r.createElement("h3",null,"University of Michigan"),r.createElement("h4",null,"Ann Arbor, MI, USA | Sept. 2020 – Apr. 2022"),r.createElement("p",null,"M.S. majoring in Electrical and Computer Engineering.")),r.createElement("div",{className:"education-item"},r.createElement("h3",null,"National Taiwan University"),r.createElement("h4",null,"Taipei, Taiwan | Sept. 2014 – June 2019"),r.createElement("p",null,"B.S. double majoring in Electrical Engineering and Mechanical Engineering.")))))};var N=n(417);const w=function(){return r.createElement("footer",{className:"site-footer container medium"},r.createElement("div",{className:"subscribe"},r.createElement("a",{href:"https://github.com/hankhsu1996/",target:"_blank",className:"subscribe-link"},r.createElement(l.G,{icon:N.zhw,className:"icon icon-github"}),r.createElement("span",{className:"subscribe-text"},"GitHub")),r.createElement("a",{href:"https://www.linkedin.com/in/hankhsu1996/",target:"_blank",className:"subscribe-link"},r.createElement(l.G,{icon:N.D9H,className:"icon icon-linkedin"}),r.createElement("span",{className:"subscribe-text"},"LinkedIn")),r.createElement("a",{href:"mailto:hankhsu@umich.edu",target:"_blank",className:"subscribe-link"},r.createElement(l.G,{icon:o.IBq,className:"icon icon-email"}),r.createElement("span",{className:"subscribe-text"},"Email"))),r.createElement("div",{className:"copyright"},r.createElement("p",null,"Shou-Li Hsu © 2022"),r.createElement("p",null,"Theme by"," ",r.createElement("a",{href:"https://github.com/TryGhost/Wave",target:"_blank"},"Ghost"))))},k=function(){return r.createElement(r.Fragment,null,r.createElement(E,null),r.createElement(v,null),r.createElement(y,null),r.createElement(w,null))},O=function(){return r.createElement(c.VK,null,r.createElement(i.Z5,null,r.createElement(i.AW,{path:"/",element:r.createElement(k,null)})))};a.s(document.getElementById("root")).render(r.createElement(O,null))}},n={};function r(e){var a=n[e];if(void 0!==a)return a.exports;var c=n[e]={exports:{}};return t[e](c,c.exports,r),c.exports}r.m=t,e=[],r.O=(t,n,a,c)=>{if(!n){var i=1/0;for(m=0;m<e.length;m++){for(var[n,a,c]=e[m],l=!0,o=0;o<n.length;o++)(!1&c||i>=c)&&Object.keys(r.O).every((e=>r.O[e](n[o])))?n.splice(o--,1):(l=!1,c<i&&(i=c));if(l){e.splice(m--,1);var s=a();void 0!==s&&(t=s)}}return t}c=c||0;for(var m=e.length;m>0&&e[m-1][2]>c;m--)e[m]=e[m-1];e[m]=[n,a,c]},r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),(()=>{var e={826:0};r.O.j=t=>0===e[t];var t=(t,n)=>{var a,c,[i,l,o]=n,s=0;if(i.some((t=>0!==e[t]))){for(a in l)r.o(l,a)&&(r.m[a]=l[a]);if(o)var m=o(r)}for(t&&t(n);s<i.length;s++)c=i[s],r.o(e,c)&&e[c]&&e[c][0](),e[c]=0;return r.O(m)},n=self.webpackChunkwebsite=self.webpackChunkwebsite||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var a=r.O(void 0,[981],(()=>r(16)));a=r.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,