(()=>{"use strict";var e,t={626:(e,t,n)=>{var r=n(294),a=n(745),l=n(711),i=n(974),c=n(625),o=n(436);const s=function(e){var t="logo logo-".concat(e.color," logo-").concat(e.size),n=r.createElement("span",{className:"logo-text"},r.createElement("i",null,"<",e.children,r.createElement("span",null,"/"),">"));return"true"===e.clickable?r.createElement(l.rU,{to:"/",className:t},n):r.createElement("div",{className:t},n)};function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t){return d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},d(e,t)}function h(e,t){if(t&&("object"===u(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return p(e)}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},f(e)}var E=[{to:"/",title:"Home",width:38.55},{to:"/projects",title:"Projects",width:53.45},{to:"/contact",title:"Contact",width:51.1}],v=function(){var e=E.map((function(e){var t=e.to===window.location.pathname?"menu-item menu-item-current":"menu-item";return r.createElement(l.rU,{key:e.to,to:e.to,className:t,style:{width:"".concat(e.width,"px")}},e.title)}));return r.createElement(r.Fragment,null,e)},g=function(){return r.createElement("nav",{className:"main-nav hidden-xs hidden-sm "},r.createElement(v,null))},b=function(e){var t=e.isToggleOn?"popup-opened header-menu hidden-md hidden-lg hidden-xl":"header-menu hidden-md hidden-lg hidden-xl";return r.createElement("div",{className:t},r.createElement("button",{className:"button header-button header-button-menu js-popup",onClick:e.handleClick},r.createElement(c.G,{icon:o.xiG})),r.createElement("div",{className:"popup"},r.createElement("div",{className:"mobile-menu"},r.createElement(v,null))))};const y=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&d(e,t)}(c,e);var t,n,a,l,i=(a=c,l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(a);if(l){var n=f(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return h(this,e)});function c(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),(t=i.call(this,e)).state={isToggleOn:!1},t.handleClick=t.handleClick.bind(p(t)),t}return t=c,(n=[{key:"handleClick",value:function(){this.setState((function(e){return{isToggleOn:!e.isToggleOn}}))}},{key:"render",value:function(){return r.createElement("header",{className:"site-header container"},r.createElement("div",{className:"header-left"},r.createElement(s,{clickable:"true",color:"dark",size:"sm"},"SLH")),r.createElement("div",{className:"header-right"},r.createElement(g,null),r.createElement(b,{isToggleOn:this.state.isToggleOn,handleClick:this.handleClick})))}}])&&m(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),c}(r.Component),w=n.p+"images/540239d9f4076c2deb41ad247d9f50df-milo-mcdowell-3027-unsplash.jpg";var k=n(679);const N=function(){return r.createElement("div",{className:"home-cover container"},r.createElement("div",{className:"site-cover u-overlay"},r.createElement(k.LazyLoadImage,{className:"cover-image jarallax-img u-object-fit",src:w,alt:"Wave",width:"1920px",height:"1080px",afterLoad:function(){document.querySelector(".site-cover").classList.add("initialized")}}),r.createElement("div",{className:"cover-content"},r.createElement("div",{className:"cover-logo"},r.createElement(s,{clickable:"false",color:"light",size:"lg"},"SLH")),r.createElement("div",{className:"cover-description"},"Shou-Li Hsu's personal website. A place to introduce myself and share my thoughts."))))},O=function(){return r.createElement("div",{className:"site-content"},r.createElement("main",{className:"site-main container medium"},r.createElement("div",{className:"post-content gh-content kg-canvas"},r.createElement("h2",{id:"about"},"About"),r.createElement("p",null,"Shou-Li Hsu is a Taiwanese digital circuit designer specialized in CPU design and transistor-level VLSI. His background is in mmWave IC, cell-based digital IC, and full-custom digital IC."),r.createElement("p",null,"He received his bachelor’s degree at National Taiwan University, Taipei, Taiwan, and his master’s degree at University of Michigan, Ann Arbor, MI, USA."),r.createElement("p",null,"He worked in MemryX Inc as an integrated circuit engineer intern. He was also employed in Tron Future Tech as a digital design engineer intern. He is currently employed by Intel as a full-time CPU RTL design engineer in Hillsboro, OR, USA."),r.createElement("h2",{id:"work"},"Work Experience"),r.createElement("div",{className:"work-item"},r.createElement("h3",null,"MemryX Inc"),r.createElement("h4",null,"IC Design Intern | May 2021 – Aug. 2021"),r.createElement("p",null,"Optimized the microarchitecture of the inter-layer communication module in an AI chip and achieved 50% area reduction. Integrated the AI core, ARM Cortex-M3 processor, and peripherals into an SoC and performed chip-level verification.")),r.createElement("div",{className:"work-item"},r.createElement("h3",null,"Tron Future Tech"),r.createElement("h4",null,"Digital Design Intern | June 2020 – Nov. 2020"),r.createElement("p",null,"Prototyped a communication IP on Xilinx FPGAs and integrated it into a transmitter system. Developed single-event upset protection mechanisms for SRAM-based FPGAs.")),r.createElement("h2",{id:"education"},"Education"),r.createElement("div",{className:"education-item"},r.createElement("h3",null,"University of Michigan"),r.createElement("h4",null,"Ann Arbor, MI, USA | Sept. 2020 – Apr. 2022"),r.createElement("p",null,"M.S. majoring in Electrical and Computer Engineering.")),r.createElement("div",{className:"education-item"},r.createElement("h3",null,"National Taiwan University"),r.createElement("h4",null,"Taipei, Taiwan | Sept. 2014 – June 2019"),r.createElement("p",null,"B.S. double majoring in Electrical Engineering and Mechanical Engineering.")))))};var S=n(417),j=function(){var e=[{name:"github",icon:S.zhw,href:"https://github.com/hankhsu1996/",title:"Github"},{name:"linkedin",icon:S.D9H,href:"https://www.linkedin.com/in/hankhsu1996/",title:"LinkedIn"},{name:"email",icon:o.IBq,href:"mailto:hankhsu@umich.edu",title:"Email"}].map((function(e){return r.createElement("a",{key:e.name,href:e.href,target:"_blank",className:"subscribe-link"},r.createElement(c.G,{icon:e.icon,className:"icon icon-".concat(e.name)}),r.createElement("span",{className:"subscribe-text"},e.title))}));return r.createElement("div",{className:"subscribe"},e)},T=function(){return r.createElement("div",{className:"copyright"},r.createElement("p",null,"Shou-Li Hsu © 2022"),r.createElement("p",null,"Theme by"," ",r.createElement("a",{href:"https://github.com/TryGhost/Wave",target:"_blank"},"Ghost")))};const A=function(){return r.createElement("footer",{className:"site-footer container medium"},r.createElement(j,null),r.createElement(T,null))},x=function(){return r.createElement(r.Fragment,null,r.createElement(y,null),r.createElement(N,null),r.createElement(O,null),r.createElement(A,null))},C=function(){return r.createElement("div",{className:"container u-flex1 u-align-vertical"},r.createElement("div",{className:"site-cover-404"},r.createElement("div",{className:"cover-content"},r.createElement("div",{className:"cover-logo"},r.createElement(s,{clickable:"false",color:"dark",size:"lg"},"404")),r.createElement("div",{className:"cover-description"},r.createElement("h2",null,"Page Not Found"),r.createElement("p",null,"Sorry, the page you are looking for does not exist.")))))},I=function(){return r.createElement(r.Fragment,null,r.createElement(y,null),r.createElement(C,null),r.createElement(A,null))},P=function(){return r.createElement(l.VK,null,r.createElement(i.Z5,null,r.createElement(i.AW,{path:"/",element:r.createElement(x,null)}),r.createElement(i.AW,{path:"/projects",element:r.createElement(I,null)}),r.createElement(i.AW,{path:"/contact",element:r.createElement(I,null)}),r.createElement(i.AW,{path:"/404",element:r.createElement(I,null)}),r.createElement(i.AW,{path:"*",element:r.createElement(i.Fg,{to:"/404",replace:!0})})))};a.s(document.getElementById("root")).render(r.createElement(P,null))}},n={};function r(e){var a=n[e];if(void 0!==a)return a.exports;var l=n[e]={exports:{}};return t[e](l,l.exports,r),l.exports}r.m=t,e=[],r.O=(t,n,a,l)=>{if(!n){var i=1/0;for(u=0;u<e.length;u++){for(var[n,a,l]=e[u],c=!0,o=0;o<n.length;o++)(!1&l||i>=l)&&Object.keys(r.O).every((e=>r.O[e](n[o])))?n.splice(o--,1):(c=!1,l<i&&(i=l));if(c){e.splice(u--,1);var s=a();void 0!==s&&(t=s)}}return t}l=l||0;for(var u=e.length;u>0&&e[u-1][2]>l;u--)e[u]=e[u-1];e[u]=[n,a,l]},r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.p="/",(()=>{var e={826:0};r.O.j=t=>0===e[t];var t=(t,n)=>{var a,l,[i,c,o]=n,s=0;if(i.some((t=>0!==e[t]))){for(a in c)r.o(c,a)&&(r.m[a]=c[a]);if(o)var u=o(r)}for(t&&t(n);s<i.length;s++)l=i[s],r.o(e,l)&&e[l]&&e[l][0](),e[l]=0;return r.O(u)},n=self.webpackChunkwebsite=self.webpackChunkwebsite||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var a=r.O(void 0,[981],(()=>r(626)));a=r.O(a)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,