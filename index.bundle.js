(()=>{"use strict";var e,t={238:(e,t,n)=>{var a=n(294),r=n(745),l=n(711),c=n(974),i=n(625),o=n(436);const s=function(e){var t="logo logo-".concat(e.color," logo-").concat(e.size);return"true"===e.clickable?a.createElement(l.rU,{to:"/",className:t},a.createElement("span",{className:"logo-text"},a.createElement("i",null,"<SLH",a.createElement("span",null,"/"),">"))):a.createElement("div",{className:t},a.createElement("span",{className:"logo-text"},a.createElement("i",null,"<SLH",a.createElement("span",null,"/"),">")))};function m(e){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m(e)}function u(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function d(e,t){return d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},d(e,t)}function p(e,t){if(t&&("object"===m(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return h(e)}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function E(e){return E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},E(e)}var f=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&d(e,t)}(m,e);var t,n,r,l,c=(r=m,l=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=E(r);if(l){var n=E(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return p(this,e)});function m(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,m),(t=c.call(this,e)).state={isToggleOn:!1},t.handleClick=t.handleClick.bind(h(t)),t}return t=m,(n=[{key:"handleClick",value:function(){this.setState((function(e){return{isToggleOn:!e.isToggleOn}}))}},{key:"render",value:function(){return a.createElement("header",{className:"site-header container"},a.createElement("div",{className:"header-left"},a.createElement(s,{clickable:"true",color:"dark",size:"sm"})),a.createElement("div",{className:"header-right"},a.createElement("nav",{className:"main-nav hidden-xs hidden-sm "},a.createElement(g,{to:"/"},"Home"),a.createElement(g,{to:"/projects"},"Projects"),a.createElement(g,{to:"/contact"},"Contact")),a.createElement("div",{className:(this.state.isToggleOn?"popup-opened":"")+" header-menu hidden-md hidden-lg hidden-xl"},a.createElement("button",{className:"button header-button header-button-menu js-popup",onClick:this.handleClick},a.createElement(i.G,{icon:o.xiG})),a.createElement("div",{className:"popup"},a.createElement("div",{className:"mobile-menu"},a.createElement(g,{to:"/"},"Home"),a.createElement(g,{to:"/projects"},"Projects"),a.createElement(g,{to:"/contact"},"Contact"))))))}}])&&u(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),m}(a.Component),g=function(e){console.log(window.location.pathname),console.log(e.to);var t=e.to===window.location.pathname;return console.log(t),a.createElement(l.rU,{to:e.to,className:t?"menu-item menu-item-current":"menu-item"},e.children)};const v=f,b=n.p+"images/540239d9f4076c2deb41ad247d9f50df-milo-mcdowell-3027-unsplash.jpg";var y=n(679);const N=function(){return a.createElement("div",{className:"home-cover container"},a.createElement("div",{className:"site-cover u-overlay"},a.createElement(y.LazyLoadImage,{className:"cover-image jarallax-img u-object-fit",src:b,alt:"Wave",width:"1920px",height:"1080px",afterLoad:function(){document.querySelector(".site-cover").classList.add("initialized")}}),a.createElement("div",{className:"cover-content"},a.createElement("div",{className:"cover-logo"},a.createElement(s,{clickable:"false",color:"light",size:"lg"})),a.createElement("div",{className:"cover-description"},"Shou-Li Hsu's personal website. A place to introduce myself and share my thoughts."))))},k=function(){return a.createElement("div",{className:"site-content"},a.createElement("main",{className:"site-main container medium"},a.createElement("div",{className:"post-content gh-content kg-canvas"},a.createElement("h2",{id:"about"},"About"),a.createElement("p",null,"Shou-Li Hsu is a Taiwanese digital circuit designer specialized in CPU design and transistor-level VLSI. His background is in mmWave IC, cell-based digital IC, and full-custom digital IC."),a.createElement("p",null,"He received his bachelor’s degree at National Taiwan University, Taipei, Taiwan, and his master’s degree at University of Michigan, Ann Arbor, MI, USA."),a.createElement("p",null,"He worked in MemryX Inc as an integrated circuit engineer intern. He was also employed in Tron Future Tech as a digital design engineer intern. He is currently employed by Intel as a full-time CPU RTL design engineer in Hillsboro, OR, USA."),a.createElement("h2",{id:"work"},"Work Experience"),a.createElement("div",{className:"work-item"},a.createElement("h3",null,"MemryX Inc"),a.createElement("h4",null,"IC Design Intern | May 2021 – Aug. 2021"),a.createElement("p",null,"Optimized the microarchitecture of the inter-layer communication module in an AI chip and achieved 50% area reduction. Integrated the AI core, ARM Cortex-M3 processor, and peripherals into an SoC and performed chip-level verification.")),a.createElement("div",{className:"work-item"},a.createElement("h3",null,"Tron Future Tech"),a.createElement("h4",null,"Digital Design Intern | June 2020 – Nov. 2020"),a.createElement("p",null,"Prototyped a communication IP on Xilinx FPGAs and integrated it into a transmitter system. Developed single-event upset protection mechanisms for SRAM-based FPGAs.")),a.createElement("h2",{id:"education"},"Education"),a.createElement("div",{className:"education-item"},a.createElement("h3",null,"University of Michigan"),a.createElement("h4",null,"Ann Arbor, MI, USA | Sept. 2020 – Apr. 2022"),a.createElement("p",null,"M.S. majoring in Electrical and Computer Engineering.")),a.createElement("div",{className:"education-item"},a.createElement("h3",null,"National Taiwan University"),a.createElement("h4",null,"Taipei, Taiwan | Sept. 2014 – June 2019"),a.createElement("p",null,"B.S. double majoring in Electrical Engineering and Mechanical Engineering.")))))};var w=n(417);const O=function(){return a.createElement("footer",{className:"site-footer container medium"},a.createElement("div",{className:"subscribe"},a.createElement("a",{href:"https://github.com/hankhsu1996/",target:"_blank",className:"subscribe-link"},a.createElement(i.G,{icon:w.zhw,className:"icon icon-github"}),a.createElement("span",{className:"subscribe-text"},"GitHub")),a.createElement("a",{href:"https://www.linkedin.com/in/hankhsu1996/",target:"_blank",className:"subscribe-link"},a.createElement(i.G,{icon:w.D9H,className:"icon icon-linkedin"}),a.createElement("span",{className:"subscribe-text"},"LinkedIn")),a.createElement("a",{href:"mailto:hankhsu@umich.edu",target:"_blank",className:"subscribe-link"},a.createElement(i.G,{icon:o.IBq,className:"icon icon-email"}),a.createElement("span",{className:"subscribe-text"},"Email"))),a.createElement("div",{className:"copyright"},a.createElement("p",null,"Shou-Li Hsu © 2022"),a.createElement("p",null,"Theme by"," ",a.createElement("a",{href:"https://github.com/TryGhost/Wave",target:"_blank"},"Ghost"))))},j=function(){return a.createElement(a.Fragment,null,a.createElement(v,null),a.createElement(N,null),a.createElement(k,null),a.createElement(O,null))},S=function(){return a.createElement("div",{className:"site-content"},a.createElement("div",{className:"content-area"},a.createElement("main",{className:"site-main"},a.createElement("article",{className:"post no-image page single"},a.createElement("header",{className:"post-header container medium"},a.createElement("h1",{className:"post-title"},"OPPS! PAGE NOT FOUND")),a.createElement("div",{className:"post-content gh-content kg-canvas"},a.createElement("p",null,"Sorry, the page you’re looking for doesn’t exist. Maybe the author doesn’t want to implement this page. Try again later."))))))},T=function(){return a.createElement(a.Fragment,null,a.createElement(v,null),a.createElement(S,null),a.createElement(O,null))},x=function(){return a.createElement(a.Fragment,null,a.createElement(v,null),a.createElement(S,null),a.createElement(O,null))},A=function(){return a.createElement(l.VK,null,a.createElement(c.Z5,null,a.createElement(c.AW,{path:"/",element:a.createElement(j,null)}),a.createElement(c.AW,{path:"/projects",element:a.createElement(T,null)}),a.createElement(c.AW,{path:"/contact",element:a.createElement(x,null)})))};r.s(document.getElementById("root")).render(a.createElement(A,null))}},n={};function a(e){var r=n[e];if(void 0!==r)return r.exports;var l=n[e]={exports:{}};return t[e](l,l.exports,a),l.exports}a.m=t,e=[],a.O=(t,n,r,l)=>{if(!n){var c=1/0;for(m=0;m<e.length;m++){for(var[n,r,l]=e[m],i=!0,o=0;o<n.length;o++)(!1&l||c>=l)&&Object.keys(a.O).every((e=>a.O[e](n[o])))?n.splice(o--,1):(i=!1,l<c&&(c=l));if(i){e.splice(m--,1);var s=r();void 0!==s&&(t=s)}}return t}l=l||0;for(var m=e.length;m>0&&e[m-1][2]>l;m--)e[m]=e[m-1];e[m]=[n,r,l]},a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.p="/",(()=>{var e={826:0};a.O.j=t=>0===e[t];var t=(t,n)=>{var r,l,[c,i,o]=n,s=0;if(c.some((t=>0!==e[t]))){for(r in i)a.o(i,r)&&(a.m[r]=i[r]);if(o)var m=o(a)}for(t&&t(n);s<c.length;s++)l=c[s],a.o(e,l)&&e[l]&&e[l][0](),e[l]=0;return a.O(m)},n=self.webpackChunkwebsite=self.webpackChunkwebsite||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var r=a.O(void 0,[981],(()=>a(238)));r=a.O(r)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,