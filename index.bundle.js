(()=>{"use strict";var e,t={565:(e,t,a)=>{var n=a(294),r=a(745),l=a(711),c=a(974),i=a(947),o=a(417),s=a(24),m=a(814),u=a(436);const d=function(e){var t="logo logo-".concat(e.color," logo-").concat(e.size),a=n.createElement("span",{className:"logo-text"},n.createElement("i",null,"<",e.children,n.createElement("span",null,"/"),">"));return e.clickable?n.createElement(l.rU,{to:"/",className:t,onContextMenu:function(e){return e.preventDefault(),!1}},a):n.createElement("div",{className:t},a)};function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}var p=[{to:"/",title:"Home",width:38.55},{to:"/projects",title:"Projects",width:53.45},{to:"/contact",title:"Contact",width:51.1}],g=function(e){var t=p.map((function(t){var a=t.to===window.location.pathname?"menu-item menu-item-current":"menu-item";return n.createElement(l.rU,{key:t.to,to:t.to,className:a,style:e.fixWidth?{width:t.width+1}:{}},t.title)}));return n.createElement(n.Fragment,null,t)},E=function(){return n.createElement("nav",{className:"main-nav hidden-xs hidden-sm "},n.createElement(g,{fixWidth:!0}))},f=function(e){var t=e.isToggleOn?"popup-opened header-menu hidden-md hidden-lg hidden-xl":"header-menu hidden-md hidden-lg hidden-xl";return n.createElement("div",{className:t},n.createElement("button",{className:"button header-button header-button-menu js-popup",onClick:e.handleClick},n.createElement(m.G,{icon:u.xiG})),n.createElement("div",{className:"popup"},n.createElement("div",{className:"mobile-menu"},n.createElement(g,null))))};const v=function(){var e,t,a=(e=n.useState(!1),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,l=[],c=!0,i=!1;try{for(a=a.call(e);!(c=(n=a.next()).done)&&(l.push(n.value),!t||l.length!==t);c=!0);}catch(e){i=!0,r=e}finally{try{c||null==a.return||a.return()}finally{if(i)throw r}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return h(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?h(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=a[0],l=a[1],i=(0,c.TH)();return n.useEffect((function(){l(!1),window.scrollTo({top:0,behavior:"smooth"})}),[i]),n.useEffect((function(){var e=function(e){e.target.closest(".header-button")?l(!r):e.target.closest(".popup")||l(!1)};return document.addEventListener("click",e),function(){document.removeEventListener("click",e)}})),n.createElement("header",{className:"site-header container"},n.createElement("div",{className:"header-left"},n.createElement(d,{clickable:!0,color:"dark",size:"sm"},"SLH")),n.createElement("div",{className:"header-right"},n.createElement(E,null),n.createElement(f,{isToggleOn:r})))},b=a.p+"images/540239d9f4076c2deb41ad247d9f50df-milo-mcdowell-3027-unsplash.jpg";var N=a(679);const w=function(){return n.createElement("div",{className:"home-cover container"},n.createElement("div",{className:"site-cover u-overlay"},n.createElement(N.LazyLoadImage,{className:"cover-image jarallax-img u-object-fit",src:b,alt:"Wave",width:"1920px",height:"1080px",afterLoad:function(){document.querySelector(".site-cover").classList.add("initialized")}}),n.createElement("div",{className:"cover-content"},n.createElement("div",{className:"cover-logo"},n.createElement(d,{color:"light",size:"lg"},"SLH")),n.createElement("div",{className:"cover-description"},"Shou-Li Hsu's personal website. A place to introduce myself and share my thoughts."))))},y=function(){return n.createElement("div",{className:"site-content"},n.createElement("main",{className:"site-main"},n.createElement("div",{className:"post-content gh-content kg-canvas"},n.createElement("h2",{id:"about"},"About"),n.createElement("p",null,"Shou-Li Hsu is a Taiwanese digital circuit designer specialized in CPU design and transistor-level VLSI. His background is in mmWave IC, cell-based digital IC, and full-custom digital IC."),n.createElement("p",null,"He received his bachelor’s degree at National Taiwan University, Taipei, Taiwan, and his master’s degree at University of Michigan, Ann Arbor, MI, USA."),n.createElement("p",null,"He worked in MemryX Inc as an integrated circuit engineer intern. He was also employed in Tron Future Tech as a digital design engineer intern. He is currently employed by Intel as a full-time CPU RTL design engineer in Hillsboro, OR, USA."),n.createElement("h2",{id:"work"},"Work Experience"),n.createElement("div",{className:"work-item"},n.createElement("h3",null,"MemryX Inc"),n.createElement("h4",null,"IC Design Intern | May 2021 – Aug. 2021"),n.createElement("p",null,"Optimized the microarchitecture of the inter-layer communication module in an AI chip and achieved 50% area reduction. Integrated the AI core, ARM Cortex-M3 processor, and peripherals into an SoC and performed chip-level verification.")),n.createElement("div",{className:"work-item"},n.createElement("h3",null,"Tron Future Tech"),n.createElement("h4",null,"Digital Design Intern | June 2020 – Nov. 2020"),n.createElement("p",null,"Prototyped a communication IP on Xilinx FPGAs and integrated it into a transmitter system. Developed single-event upset protection mechanisms for SRAM-based FPGAs.")),n.createElement("h2",{id:"education"},"Education"),n.createElement("div",{className:"education-item"},n.createElement("h3",null,"University of Michigan"),n.createElement("h4",null,"Ann Arbor, MI, USA | Sept. 2020 – Apr. 2022"),n.createElement("p",null,"M.S. majoring in Electrical and Computer Engineering.")),n.createElement("div",{className:"education-item"},n.createElement("h3",null,"National Taiwan University"),n.createElement("h4",null,"Taipei, Taiwan | Sept. 2014 – June 2019"),n.createElement("p",null,"B.S. double majoring in Electrical Engineering and Mechanical Engineering.")))))},k=JSON.parse('[{"name":"github","href":"https://github.com/hankhsu1996/","title":"GitHub","icon":"fa-github","iconSize":"20px","iconPaddingBottom":"1pt","iconColor":"#181717","iconTextSpacing":"6px"},{"name":"linkedin","href":"https://www.linkedin.com/in/hankhsu1996/","title":"LinkedIn","icon":"fa-linkedin","iconSize":"22px","iconPaddingBottom":"0.5pt","iconColor":"#0a66c2","iconTextSpacing":"6px"},{"name":"facebook","href":"https://www.facebook.com/hankhsu1996/","title":"Facebook","icon":"fa-facebook","iconSize":"21px","iconPaddingBottom":"1.5pt","iconColor":"#1778F2","iconTextSpacing":"6px"}]');var S=function(){var e=k.map((function(e){return n.createElement("a",{key:e.name,href:e.href,target:"_blank",className:"subscribe-link"},n.createElement(m.G,{icon:["fa-brands",e.icon],className:"icon icon-".concat(e.name),style:{fontSize:e.iconSize,paddingBottom:e.iconPaddingBottom,color:e.iconColor}}),n.createElement("span",{className:"subscribe-text",style:{marginLeft:e.iconTextSpacing}},e.title))}));return n.createElement("div",{className:"subscribe"},e)},x=function(){return n.createElement("div",{className:"copyright"},n.createElement("p",null,"Shou-Li Hsu © 2022"),n.createElement("p",null,"Theme by"," ",n.createElement("a",{href:"https://github.com/TryGhost/Wave",target:"_blank"},"Ghost")))};const A=function(){return n.createElement("footer",{className:"site-footer container medium"},n.createElement(S,null),n.createElement(x,null))},C=function(){return n.createElement(n.Fragment,null,n.createElement(v,null),n.createElement(w,null),n.createElement(y,null),n.createElement(A,null))},I=function(e){var t=n.useRef(null),a="".concat(e.className," lazyload"),r=new Date;return n.createElement("div",{ref:t},n.createElement(N.LazyLoadImage,{className:a,src:e.src,alt:e.alt,afterLoad:function(){var a=new Date-r,n=e.minDelay||0,l=Math.max(n-a,0);setTimeout((function(){var e=t.current.children[0];e.classList.remove("lazyload"),e.classList.add("lazyloaded")}),l)}}))},T=a.p+"images/0da897a1f1079e4d2aa0bc37e811c999-author.jpg",D=function(){return n.createElement("div",{className:"term-author"},n.createElement("section",{className:"author"},n.createElement("div",{className:"author-image-placeholder u-placeholder"},n.createElement(I,{className:"author-image u-object-fit ls-is-cached",src:T,alt:"Shou-Li Hsu",minDelay:300})),n.createElement("div",{className:"author-wrapper"},n.createElement("header",{className:"author-header"},n.createElement("h4",{className:"author-name"},"Shou-Li Hsu")),n.createElement("span",{className:"author-meta"},"Intel CPU Design Engineer "),n.createElement("div",{className:"author-bio"},"Here are some of the projects I've worked on. The read more buttons are not working yet."))))},L=function(e){var t=e.data,a=t.title,r=t.excerpt,c=t.date,i=t.tag,o=t.img_src,s=t.link;return n.createElement("article",{className:"post tag-technology"},n.createElement("div",{className:"post-media js-play"},n.createElement("div",{className:"u-placeholder square"},n.createElement(I,{className:"post-image u-object-fit lazyautosizes ls-is-cached",src:o,alt:a,minDelay:50}))),n.createElement("div",{className:"post-wrapper"},n.createElement("header",{className:"post-header"},n.createElement("h2",{className:"post-title"},n.createElement(l.rU,{className:"post-title-link",to:s},a)),n.createElement("div",{className:"post-meta"},n.createElement("span",{className:"post-meta-item post-meta-date"},n.createElement("time",{dateTime:c},new Date(c).toLocaleString("en-US",{year:"numeric",month:"short",day:"numeric"}))),n.createElement("span",{className:"post-meta-item post-meta-tags"},n.createElement(l.rU,{className:"post-tag post-tag-technology",to:"/tag/".concat(i.toLowerCase()),title:i},i)))),n.createElement("div",{className:"post-excerpt"},r),n.createElement("footer",{className:"post-footer"},n.createElement(l.rU,{className:"button-text post-footer-more",to:s},n.createElement(m.G,{icon:u._tD,className:"icon icon-chevron-right"}),"Read more NYI"))))},M=JSON.parse('[{"title":"Desktop Laser Engraver","excerpt":"A lightweight desktop laser engraver made with Arduino Mega and 3D-printed parts. The firmware is adopted from the Marlin firmware.","date":"2017-08-31","tag":"Robot","img_src":"https://source.unsplash.com/ekK_kGLeTQA","link":""},{"title":"Hexapod Robot Gait Development","excerpt":"An undergrads research project on the development of a hexapod robot gait. The new flip-and-jump gait allows the robot to jump over obstacles.","date":"2018-07-31","tag":"Robot","img_src":"https://source.unsplash.com/GNk9IAiIvrg","link":""},{"title":"FountainScape Drawing Robot","excerpt":"A 2-Dimensional numerical control drawing robot. The robot is capable of drawing SVG files and features an easy-to-use web interface.","date":"2018-06-30","tag":"Robot","img_src":"https://source.unsplash.com/l3N9Q27zULw","link":""},{"title":"Ka-Band IQ Mixer in GaAs Process","excerpt":"A Ka-band IQ mixer based on GaAs pHEMT process which aims to reduce the image noise in the ngVLA radio telescope. The chip is taped-out in Jan. 2020.","date":"2019-07-31","tag":"Analog","img_src":"https://source.unsplash.com/fsH1KjbdjE8","link":""},{"title":"AES Algorithm Hardware Accelerator","excerpt":"A hardware accelerator for the Advanced Encryption Standard algorithm. The accelerator supports ECB and CBC modes, and is taped-out in UMC 0.18 process.","date":"2019-06-30","tag":"Digital","img_src":"https://source.unsplash.com/BcjdbyKWquw","link":""},{"title":"Classic Five-Stage RISC-V Processor","excerpt":"A classic five-stage pipelined RISC-V RV32I processor with data forwarding unit. Implemented in SystemVerilog and synthesized with Design Compiler.","date":"2020-11-30","tag":"Digital","img_src":"https://source.unsplash.com/d21CGQKtJh8","link":""},{"title":"Superscalar Dynamically-Scheduled RISC-V Processor","excerpt":"A two-way superscalar, dynamically-scheduled RISC-V processor with MIPS R10000 style register renaming written in SystemVerilog. Ranked 1st in the class.","date":"2020-12-31","tag":"Digital","img_src":"https://source.unsplash.com/RBthQZJd_vU","link":""},{"title":"Full-Custom Layout RISC Processor","excerpt":"A RISC processor with a full-custom register file, ALU and barrel shifter. The schematics and layouts are designed in Cadence Virtuoso.","date":"2021-04-20","tag":"Digital","img_src":"https://source.unsplash.com/M0yAcynJr6M","link":""},{"title":"MOESI Cache-Coherence Protocol Verification","excerpt":"A formal verification of the MOESI cache-coherence protocol implemented in Murphi model checker.","date":"2021-03-31","tag":"Digital","img_src":"https://source.unsplash.com/eaDwf4UAEhk","link":""},{"title":"Murphi VS Code Language Extension","excerpt":"The VS Code language extension for Murphi model checker language. It supports syntax highlighting and code completion.","date":"2021-02-28","tag":"Software","img_src":"https://source.unsplash.com/_yMciiStJyY","link":""},{"title":"Snake Language Compiler","excerpt":"A compiler for the snake language written in Rust. It realizes the register allocation algorithm and first-class function support.","date":"2021-12-10","tag":"Software","img_src":"https://source.unsplash.com/BfrQnKBulYQ","link":""},{"title":"Soft-Decision Decoder for Turbo Product Code","excerpt":"A soft-decision decoder for the turbo product code and staircase code forward error correction. The decoder is implemented in SystemVerilog.","date":"2021-12-15","tag":"Digital","img_src":"https://source.unsplash.com/FnA5pAzqhMM","link":""},{"title":"Side-Channel Attack Resistant AES SoC","excerpt":"A power side-channel attack resistant AES SoC with a stacked-voltage domain backend design. The backend features a digital LDO and a special level shifter.","date":"2022-04-20","tag":"Digital","img_src":"https://source.unsplash.com/t2fKRcKF3fw","link":""},{"title":"Radio Receiver Design","excerpt":"A radio receiver design including a 1.8 GHz low-noise amplifier, a Gilbert cell mixer and a 1.7 GHz voltage-controlled resonant oscillator in IBM 130 process.","date":"2022-04-30","tag":"Analog","img_src":"https://source.unsplash.com/tkE5nutsKt8","link":""},{"title":"Personal Website","excerpt":"A single-page application personal website built with React and Webpack and hosted on GitHub Pages.","date":"2022-05-19","tag":"Software","img_src":"https://source.unsplash.com/7okkFhxrxNw","link":""}]'),j=function(){return n.createElement(n.Fragment,null,n.createElement(v,null),n.createElement("div",{className:"site-content"},n.createElement("div",{className:"content-area"},n.createElement("main",{className:"site-main container medium"},n.createElement(D,null),n.createElement("div",{className:"post-feed"},M.sort((function(e,t){return new Date(t.date)-new Date(e.date)})).map((function(e){return n.createElement(L,{data:e,key:e.title})})))))),n.createElement(A,null))},R=function(){var e=(0,c.UO)(),t=M.filter((function(t){return t.tag.toLowerCase()===e.tag})),a="Tag: ".concat(e.tag),r=0===t.length?"There are no projects with the tag ".concat(e.tag,"."):"All projects tagged with ".concat(e.tag,".");return n.createElement(n.Fragment,null,n.createElement(v,null),n.createElement("div",{className:"site-content"},n.createElement("div",{className:"content-area"},n.createElement("main",{className:"site-main container medium"},n.createElement("section",{className:"term"},n.createElement("h1",{className:"term-name"},a),n.createElement("div",{className:"term-description"},r)),n.createElement("div",{className:"post-feed"},t.sort((function(e,t){return new Date(t.date)-new Date(e.date)})).map((function(e){return n.createElement(L,{data:e,key:e.title})})))))),n.createElement(A,null))};var z=function(){return n.createElement("header",{className:"contact-header container medium"},n.createElement("h1",{className:"contact-title"},"Let's work together!"),n.createElement("p",{className:"contact-subtitle"},"Tell me about your project, or just say hi!"))},_=function(){return n.createElement("div",{className:"mail-me-wrap"},n.createElement("a",{className:"mail-me",target:"_blank",href:"mailto:hankhsu@umich.edu"},n.createElement("div",{className:"icon-wrap"},n.createElement(m.G,{className:"icon",icon:["far","envelope"]})),n.createElement("div",{className:"mail-me-text"},n.createElement("p",null,"Mail me at"),n.createElement("p",{className:"email"},"hankhsu@umich.edu"))))};const H=function(){return n.createElement("div",{className:"site-content"},n.createElement("div",{className:"content-area"},n.createElement("main",{className:"site-main"},n.createElement(z,null),n.createElement(_,null))))},P=function(){return n.createElement(n.Fragment,null,n.createElement(v,null),n.createElement(H,null),n.createElement(A,null))},O=function(){return n.createElement("div",{className:"container u-flex1 u-align-vertical"},n.createElement("div",{className:"site-cover-404"},n.createElement("div",{className:"cover-content"},n.createElement("div",{className:"cover-logo"},n.createElement(d,{clickable:"false",color:"dark",size:"lg"},"404")),n.createElement("div",{className:"cover-description"},n.createElement("h2",null,"Page Not Found"),n.createElement("p",null,"Sorry, the page you are looking for does not exist.")))))},U=function(){return n.createElement(n.Fragment,null,n.createElement(v,null),n.createElement(O,null),n.createElement(A,null))};i.vI.add(o.vnX,s.NCV);const G=function(){return n.createElement(l.VK,null,n.createElement(c.Z5,null,n.createElement(c.AW,{exact:!0,path:"/",element:n.createElement(C,null)}),n.createElement(c.AW,{exact:!0,path:"/projects",element:n.createElement(j,null)}),n.createElement(c.AW,{exact:!0,path:"/contact",element:n.createElement(P,null)}),n.createElement(c.AW,{exact:!0,path:"/tag/:tag",element:n.createElement(R,null)}),n.createElement(c.AW,{path:"*",element:n.createElement(U,null)})))};r.s(document.getElementById("root")).render(n.createElement(n.StrictMode,null,n.createElement(G,null)))}},a={};function n(e){var r=a[e];if(void 0!==r)return r.exports;var l=a[e]={exports:{}};return t[e](l,l.exports,n),l.exports}n.m=t,e=[],n.O=(t,a,r,l)=>{if(!a){var c=1/0;for(m=0;m<e.length;m++){for(var[a,r,l]=e[m],i=!0,o=0;o<a.length;o++)(!1&l||c>=l)&&Object.keys(n.O).every((e=>n.O[e](a[o])))?a.splice(o--,1):(i=!1,l<c&&(c=l));if(i){e.splice(m--,1);var s=r();void 0!==s&&(t=s)}}return t}l=l||0;for(var m=e.length;m>0&&e[m-1][2]>l;m--)e[m]=e[m-1];e[m]=[a,r,l]},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.p="/",(()=>{var e={826:0};n.O.j=t=>0===e[t];var t=(t,a)=>{var r,l,[c,i,o]=a,s=0;if(c.some((t=>0!==e[t]))){for(r in i)n.o(i,r)&&(n.m[r]=i[r]);if(o)var m=o(n)}for(t&&t(a);s<c.length;s++)l=c[s],n.o(e,l)&&e[l]&&e[l][0](),e[l]=0;return n.O(m)},a=self.webpackChunkwebsite=self.webpackChunkwebsite||[];a.forEach(t.bind(null,0)),a.push=t.bind(null,a.push.bind(a))})();var r=n.O(void 0,[933],(()=>n(565)));r=n.O(r)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,