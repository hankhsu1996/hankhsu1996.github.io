(()=>{"use strict";var e,t,a,n={565:(e,t,a)=>{var n=a(294),r=a(745),l=a(655),c=a(250),i=a(636),o=a(24),s=a(288),m=a(814),u=a(417);const d=function(e){var t="logo logo-".concat(e.color," logo-").concat(e.size),a=n.createElement("span",{className:"logo-text"},n.createElement("i",null,"<",e.children,n.createElement("span",null,"/"),">"));return e.clickable?n.createElement(l.rU,{to:"/",className:t,onContextMenu:function(e){return e.preventDefault(),!1}},a):n.createElement("div",{className:t},a)};function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,n=new Array(t);a<t;a++)n[a]=e[a];return n}var p=[{to:"/",title:"Home",width:38.55},{to:"/projects",title:"Projects",width:53.45},{to:"/contact",title:"Contact",width:51.1}],g=function(e){var t=p.map((function(t){var a=t.to===window.location.pathname?"menu-item menu-item-current":"menu-item";return n.createElement(l.rU,{key:t.to,to:t.to,className:a,style:e.fixWidth?{width:t.width+1}:{}},t.title)}));return n.createElement(n.Fragment,null,t)},f=function(){return n.createElement("nav",{className:"main-nav hidden-xs hidden-sm "},n.createElement(g,{fixWidth:!0}))},E=function(e){var t=e.isToggleOn?"popup-opened header-menu hidden-md hidden-lg hidden-xl":"header-menu hidden-md hidden-lg hidden-xl";return n.createElement("div",{className:t},n.createElement("button",{className:"button header-button header-button-menu js-popup",onClick:e.handleClick},n.createElement(m.G,{icon:u.xiG})),n.createElement("div",{className:"popup"},n.createElement("div",{className:"mobile-menu"},n.createElement(g,null))))};const v=function(){var e,t,a=(e=n.useState(!1),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var a=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=a){var n,r,l,c,i=[],o=!0,s=!1;try{if(l=(a=a.call(e)).next,0===t){if(Object(a)!==a)return;o=!1}else for(;!(o=(n=l.call(a)).done)&&(i.push(n.value),i.length!==t);o=!0);}catch(e){s=!0,r=e}finally{try{if(!o&&null!=a.return&&(c=a.return(),Object(c)!==c))return}finally{if(s)throw r}}return i}}(e,t)||function(e,t){if(e){if("string"==typeof e)return h(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?h(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=a[0],l=a[1],i=(0,c.TH)();return n.useEffect((function(){l(!1),window.scrollTo({top:0,behavior:"smooth"})}),[i]),n.useEffect((function(){var e=function(e){e.target.closest(".header-button")?l(!r):e.target.closest(".popup")||l(!1)};return document.addEventListener("click",e),function(){document.removeEventListener("click",e)}})),n.createElement("header",{className:"site-header container"},n.createElement("div",{className:"header-left"},n.createElement(d,{clickable:!0,color:"dark",size:"sm"},"SLH")),n.createElement("div",{className:"header-right"},n.createElement(f,null),n.createElement(E,{isToggleOn:r})))},b=a.p+"images/540239d9f4076c2deb41ad247d9f50df-milo-mcdowell-3027-unsplash.jpg";var y=a(679);const N=function(){return n.createElement("div",{className:"home-cover container"},n.createElement("div",{className:"site-cover u-overlay"},n.createElement(y.LazyLoadImage,{className:"cover-image jarallax-img u-object-fit",src:b,alt:"Wave",width:"1920px",height:"1080px",afterLoad:function(){document.querySelector(".site-cover").classList.add("initialized")}}),n.createElement("div",{className:"cover-content"},n.createElement("div",{className:"cover-logo"},n.createElement(d,{color:"light",size:"lg"},"SLH")),n.createElement("div",{className:"cover-description"},"Shou-Li Hsu's personal website. A place to introduce myself and share my thoughts."))))},w=function(){return n.createElement("div",{className:"site-content"},n.createElement("main",{className:"site-main"},n.createElement("div",{className:"post-content gh-content kg-canvas"},n.createElement("h2",{id:"about"},"About"),n.createElement("p",null,"Shou-Li Hsu is a Taiwanese digital circuit designer specialized in CPU design and transistor-level VLSI. His background is in mmWave IC, cell-based digital IC, and full-custom digital IC."),n.createElement("p",null,"He received his bachelor’s degree at National Taiwan University, Taipei, Taiwan, and his master’s degree at University of Michigan, Ann Arbor, MI, USA."),n.createElement("p",null,"He worked in MemryX Inc as an integrated circuit engineer intern. He was also employed in Tron Future Tech as a digital design engineer intern. He is currently employed by Intel as a full-time CPU RTL design engineer in Hillsboro, OR, USA."),n.createElement("h2",{id:"work"},"Work Experience"),n.createElement("div",{className:"work-item"},n.createElement("h3",null,"MemryX Inc"),n.createElement("h4",null,"IC Design Intern | May 2021 – Aug. 2021"),n.createElement("p",null,"Optimized the microarchitecture of the inter-layer communication module in an AI chip and achieved 50% area reduction. Integrated the AI core, ARM Cortex-M3 processor, and peripherals into an SoC and performed chip-level verification.")),n.createElement("div",{className:"work-item"},n.createElement("h3",null,"Tron Future Tech"),n.createElement("h4",null,"Digital Design Intern | June 2020 – Nov. 2020"),n.createElement("p",null,"Prototyped a communication IP on Xilinx FPGAs and integrated it into a transmitter system. Developed single-event upset protection mechanisms for SRAM-based FPGAs.")),n.createElement("h2",{id:"education"},"Education"),n.createElement("div",{className:"education-item"},n.createElement("h3",null,"University of Michigan"),n.createElement("h4",null,"Ann Arbor, MI, USA | Sept. 2020 – Apr. 2022"),n.createElement("p",null,"M.S. majoring in Electrical and Computer Engineering.")),n.createElement("div",{className:"education-item"},n.createElement("h3",null,"National Taiwan University"),n.createElement("h4",null,"Taipei, Taiwan | Sept. 2014 – June 2019"),n.createElement("p",null,"B.S. double majoring in Electrical Engineering and Mechanical Engineering.")))))},k=JSON.parse('[{"name":"github","href":"https://github.com/hankhsu1996/","title":"GitHub","icon":"fa-github","iconSize":"20px","iconPaddingBottom":"1pt","iconColor":"#181717","iconTextSpacing":"6px"},{"name":"linkedin","href":"https://www.linkedin.com/in/hankhsu1996/","title":"LinkedIn","icon":"fa-linkedin","iconSize":"22px","iconPaddingBottom":"0.5pt","iconColor":"#0a66c2","iconTextSpacing":"6px"},{"name":"facebook","href":"https://www.facebook.com/hankhsu1996/","title":"Facebook","icon":"fa-facebook","iconSize":"21px","iconPaddingBottom":"1.5pt","iconColor":"#1778F2","iconTextSpacing":"6px"}]');var S=function(){var e=k.map((function(e){return n.createElement("a",{key:e.name,href:e.href,target:"_blank",className:"subscribe-link"},n.createElement(m.G,{icon:["fa-brands",e.icon],className:"icon icon-".concat(e.name),style:{fontSize:e.iconSize,paddingBottom:e.iconPaddingBottom,color:e.iconColor}}),n.createElement("span",{className:"subscribe-text",style:{marginLeft:e.iconTextSpacing}},e.title))}));return n.createElement("div",{className:"subscribe"},e)},x=function(){return n.createElement("div",{className:"copyright"},n.createElement("p",null,"Shou-Li Hsu © 2022"),n.createElement("p",null,"Theme by"," ",n.createElement("a",{href:"https://github.com/TryGhost/Wave",target:"_blank"},"Ghost")))};const A=function(){return n.createElement("footer",{className:"site-footer container medium"},n.createElement(S,null),n.createElement(x,null))},C=function(){return n.createElement(n.Fragment,null,n.createElement(v,null),n.createElement(N,null),n.createElement(w,null),n.createElement(A,null))},I=function(e){var t=n.useRef(null),a="".concat(e.className," lazyload"),r=new Date;return n.createElement("div",{ref:t},n.createElement(y.LazyLoadImage,{className:a,src:e.src,alt:e.alt,afterLoad:function(){var a=new Date-r,n=e.minDelay||0,l=Math.max(n-a,0);setTimeout((function(){var e=t.current.children[0];e.classList.remove("lazyload"),e.classList.add("lazyloaded")}),l)}}))},T=a.p+"images/0da897a1f1079e4d2aa0bc37e811c999-author.jpg",j=function(){return n.createElement("div",{className:"term-author"},n.createElement("section",{className:"author"},n.createElement("div",{className:"author-image-placeholder u-placeholder"},n.createElement(I,{className:"author-image u-object-fit ls-is-cached",src:T,alt:"Shou-Li Hsu",minDelay:300})),n.createElement("div",{className:"author-wrapper"},n.createElement("header",{className:"author-header"},n.createElement("h4",{className:"author-name"},"Shou-Li Hsu")),n.createElement("span",{className:"author-meta"},"Intel CPU Design Engineer "),n.createElement("div",{className:"author-bio"},"Here are some of the projects I've worked on. The read more buttons are not working yet."))))},M=function(e){var t=e.data,a=t.title,r=t.excerpt,c=t.date,i=t.tag,o=t.img_src,s=t.link;return n.createElement("article",{className:"post tag-technology"},n.createElement("div",{className:"post-media js-play"},n.createElement("div",{className:"u-placeholder square"},n.createElement(I,{className:"post-image u-object-fit lazyautosizes ls-is-cached",src:o,alt:a,minDelay:50}))),n.createElement("div",{className:"post-wrapper"},n.createElement("header",{className:"post-header"},n.createElement("h2",{className:"post-title"},n.createElement(l.rU,{className:"post-title-link",to:s},a)),n.createElement("div",{className:"post-meta"},n.createElement("span",{className:"post-meta-item post-meta-date"},n.createElement("time",{dateTime:c},new Date(c).toLocaleString("en-US",{year:"numeric",month:"short",day:"numeric"}))),n.createElement("span",{className:"post-meta-item post-meta-tags"},n.createElement(l.rU,{className:"post-tag post-tag-technology",to:"/tag/".concat(i.toLowerCase()),title:i},i)))),n.createElement("div",{className:"post-excerpt"},r),n.createElement("footer",{className:"post-footer"},n.createElement(l.rU,{className:"button-text post-footer-more",to:s},n.createElement(m.G,{icon:u._tD,className:"icon icon-chevron-right"}),"Read more NYI"))))},_=JSON.parse('[{"title":"Desktop Laser Engraver","excerpt":"A lightweight desktop laser engraver made with Arduino Mega and 3D-printed parts. The firmware is adopted from the Marlin firmware.","date":"2017-08-31","tag":"Robot","img_src":"https://source.unsplash.com/ekK_kGLeTQA","link":""},{"title":"Hexapod Robot Gait Development","excerpt":"An undergrads research project on the development of a hexapod robot gait. The new flip-and-jump gait allows the robot to jump over obstacles.","date":"2018-07-31","tag":"Robot","img_src":"https://source.unsplash.com/GNk9IAiIvrg","link":""},{"title":"FountainScape Drawing Robot","excerpt":"A 2-Dimensional numerical control drawing robot. The robot is capable of drawing SVG files and features an easy-to-use web interface.","date":"2018-06-30","tag":"Robot","img_src":"https://source.unsplash.com/l3N9Q27zULw","link":""},{"title":"Ka-Band IQ Mixer in GaAs Process","excerpt":"A Ka-band IQ mixer based on GaAs pHEMT process which aims to reduce the image noise in the ngVLA radio telescope. The chip is taped-out in Jan. 2020.","date":"2019-07-31","tag":"Analog","img_src":"https://source.unsplash.com/fsH1KjbdjE8","link":""},{"title":"AES Algorithm Hardware Accelerator","excerpt":"A hardware accelerator for the Advanced Encryption Standard algorithm. The accelerator supports ECB and CBC modes, and is taped-out in UMC 0.18 process.","date":"2019-06-30","tag":"Digital","img_src":"https://source.unsplash.com/BcjdbyKWquw","link":""},{"title":"Classic Five-Stage RISC-V Processor","excerpt":"A classic five-stage pipelined RISC-V RV32I processor with data forwarding unit. Implemented in SystemVerilog and synthesized with Design Compiler.","date":"2020-11-30","tag":"Digital","img_src":"https://source.unsplash.com/d21CGQKtJh8","link":""},{"title":"Superscalar Dynamically-Scheduled RISC-V Processor","excerpt":"A two-way superscalar, dynamically-scheduled RISC-V processor with MIPS R10000 style register renaming written in SystemVerilog. Ranked 1st in the class.","date":"2020-12-31","tag":"Digital","img_src":"https://source.unsplash.com/RBthQZJd_vU","link":""},{"title":"Full-Custom Layout RISC Processor","excerpt":"A RISC processor with a full-custom register file, ALU and barrel shifter. The schematics and layouts are designed in Cadence Virtuoso.","date":"2021-04-20","tag":"Digital","img_src":"https://source.unsplash.com/M0yAcynJr6M","link":""},{"title":"MOESI Cache-Coherence Protocol Verification","excerpt":"A formal verification of the MOESI cache-coherence protocol implemented in Murphi model checker.","date":"2021-03-31","tag":"Digital","img_src":"https://source.unsplash.com/eaDwf4UAEhk","link":""},{"title":"Murphi VS Code Language Extension","excerpt":"The VS Code language extension for Murphi model checker language. It supports syntax highlighting and code completion.","date":"2021-02-28","tag":"Software","img_src":"https://source.unsplash.com/_yMciiStJyY","link":""},{"title":"Snake Language Compiler","excerpt":"A compiler for the snake language written in Rust. It realizes the register allocation algorithm and first-class function support.","date":"2021-12-10","tag":"Software","img_src":"https://source.unsplash.com/BfrQnKBulYQ","link":""},{"title":"Soft-Decision Decoder for Turbo Product Code","excerpt":"A soft-decision decoder for the turbo product code and staircase code forward error correction. The decoder is implemented in SystemVerilog.","date":"2021-12-15","tag":"Digital","img_src":"https://source.unsplash.com/FnA5pAzqhMM","link":""},{"title":"Side-Channel Attack Resistant AES SoC","excerpt":"A power side-channel attack resistant AES SoC with a stacked-voltage domain backend design. The backend features a digital LDO and a special level shifter.","date":"2022-04-20","tag":"Digital","img_src":"https://source.unsplash.com/t2fKRcKF3fw","link":""},{"title":"Radio Receiver Design","excerpt":"A radio receiver design including a 1.8 GHz low-noise amplifier, a Gilbert cell mixer and a 1.7 GHz voltage-controlled resonant oscillator in IBM 130 process.","date":"2022-04-30","tag":"Analog","img_src":"https://source.unsplash.com/tkE5nutsKt8","link":""},{"title":"Personal Website","excerpt":"A single-page application personal website built with React and Webpack and hosted on GitHub Pages.","date":"2022-05-19","tag":"Software","img_src":"https://source.unsplash.com/7okkFhxrxNw","link":""}]'),D=function(){return n.createElement(n.Fragment,null,n.createElement(v,null),n.createElement("div",{className:"site-content"},n.createElement("div",{className:"content-area"},n.createElement("main",{className:"site-main container medium"},n.createElement(j,null),n.createElement("div",{className:"post-feed"},_.sort((function(e,t){return new Date(t.date)-new Date(e.date)})).map((function(e){return n.createElement(M,{data:e,key:e.title})})))))),n.createElement(A,null))},L=function(){var e=(0,c.UO)(),t=_.filter((function(t){return t.tag.toLowerCase()===e.tag})),a="Tag: ".concat(e.tag),r=0===t.length?"There are no projects with the tag ".concat(e.tag,"."):"All projects tagged with ".concat(e.tag,".");return n.createElement(n.Fragment,null,n.createElement(v,null),n.createElement("div",{className:"site-content"},n.createElement("div",{className:"content-area"},n.createElement("main",{className:"site-main container medium"},n.createElement("section",{className:"term"},n.createElement("h1",{className:"term-name"},a),n.createElement("div",{className:"term-description"},r)),n.createElement("div",{className:"post-feed"},t.sort((function(e,t){return new Date(t.date)-new Date(e.date)})).map((function(e){return n.createElement(M,{data:e,key:e.title})})))))),n.createElement(A,null))};var O=function(){return n.createElement("header",{className:"contact-header container medium"},n.createElement("h1",{className:"contact-title"},"Let's work together!"),n.createElement("p",{className:"contact-subtitle"},"Tell me about your project, or just say hi!"))},P=function(){return n.createElement("div",{className:"mail-me-wrap"},n.createElement("a",{className:"mail-me",target:"_blank",href:"mailto:hankhsu@umich.edu"},n.createElement("div",{className:"icon-wrap"},n.createElement(m.G,{className:"icon",icon:["far","envelope"]})),n.createElement("div",{className:"mail-me-text"},n.createElement("p",null,"Mail me at"),n.createElement("p",{className:"email"},"hankhsu@umich.edu"))))};const R=function(){return n.createElement("div",{className:"site-content"},n.createElement("div",{className:"content-area"},n.createElement("main",{className:"site-main"},n.createElement(O,null),n.createElement(P,null))))},z=function(){return n.createElement(n.Fragment,null,n.createElement(v,null),n.createElement(R,null),n.createElement(A,null))},H=function(){return n.createElement("div",{className:"container u-flex1 u-align-vertical"},n.createElement("div",{className:"site-cover-404"},n.createElement("div",{className:"cover-content"},n.createElement("div",{className:"cover-logo"},n.createElement(d,{clickable:"false",color:"dark",size:"lg"},"404")),n.createElement("div",{className:"cover-description"},n.createElement("h2",null,"Page Not Found"),n.createElement("p",null,"Sorry, the page you are looking for does not exist.")))))},U=function(){return n.createElement(n.Fragment,null,n.createElement(v,null),n.createElement(H,null),n.createElement(A,null))};i.vI.add(o.vnX,s.NCV);const G=function(){return n.createElement(l.VK,null,n.createElement(c.Z5,null,n.createElement(c.AW,{exact:!0,path:"/",element:n.createElement(C,null)}),n.createElement(c.AW,{exact:!0,path:"/projects",element:n.createElement(D,null)}),n.createElement(c.AW,{exact:!0,path:"/contact",element:n.createElement(z,null)}),n.createElement(c.AW,{exact:!0,path:"/tag/:tag",element:n.createElement(L,null)}),n.createElement(c.AW,{path:"*",element:n.createElement(U,null)})))};r.s(document.getElementById("root")).render(n.createElement(n.StrictMode,null,n.createElement(G,null)))}},r={};function l(e){var t=r[e];if(void 0!==t)return t.exports;var a=r[e]={exports:{}};return n[e](a,a.exports,l),a.exports}l.m=n,e=[],l.O=(t,a,n,r)=>{if(!a){var c=1/0;for(m=0;m<e.length;m++){for(var[a,n,r]=e[m],i=!0,o=0;o<a.length;o++)(!1&r||c>=r)&&Object.keys(l.O).every((e=>l.O[e](a[o])))?a.splice(o--,1):(i=!1,r<c&&(c=r));if(i){e.splice(m--,1);var s=n();void 0!==s&&(t=s)}}return t}r=r||0;for(var m=e.length;m>0&&e[m-1][2]>r;m--)e[m]=e[m-1];e[m]=[a,n,r]},l.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return l.d(t,{a:t}),t},a=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,l.t=function(e,n){if(1&n&&(e=this(e)),8&n)return e;if("object"==typeof e&&e){if(4&n&&e.__esModule)return e;if(16&n&&"function"==typeof e.then)return e}var r=Object.create(null);l.r(r);var c={};t=t||[null,a({}),a([]),a(a)];for(var i=2&n&&e;"object"==typeof i&&!~t.indexOf(i);i=a(i))Object.getOwnPropertyNames(i).forEach((t=>c[t]=()=>e[t]));return c.default=()=>e,l.d(r,c),r},l.d=(e,t)=>{for(var a in t)l.o(t,a)&&!l.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},l.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),l.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l.p="/",(()=>{var e={826:0};l.O.j=t=>0===e[t];var t=(t,a)=>{var n,r,[c,i,o]=a,s=0;if(c.some((t=>0!==e[t]))){for(n in i)l.o(i,n)&&(l.m[n]=i[n]);if(o)var m=o(l)}for(t&&t(a);s<c.length;s++)r=c[s],l.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return l.O(m)},a=self.webpackChunkhankhsu1996_github_io=self.webpackChunkhankhsu1996_github_io||[];a.forEach(t.bind(null,0)),a.push=t.bind(null,a.push.bind(a))})();var c=l.O(void 0,[242],(()=>l(565)));c=l.O(c)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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aEQsRUFBU2dELEVBQVF6RCxFQUNsQyxDQUVBLElBREd1RCxHQUE0QkEsRUFBMkJoSyxHQUNyRHdILEVBQUlMLEVBQVN4QixPQUFRNkIsSUFDekJzQyxFQUFVM0MsRUFBU0ssR0FDaEJmLEVBQW9CeUMsRUFBRVcsRUFBaUJDLElBQVlELEVBQWdCQyxJQUNyRUQsRUFBZ0JDLEdBQVMsS0FFMUJELEVBQWdCQyxHQUFXLEVBRTVCLE9BQU9yRCxFQUFvQlEsRUFBRUMsRUFBTyxFQUdqQ2tELEVBQXFCQyxLQUF3QyxrQ0FBSUEsS0FBd0MsbUNBQUssR0FDbEhELEVBQW1CcEIsUUFBUWUsRUFBcUJPLEtBQUssS0FBTSxJQUMzREYsRUFBbUJHLEtBQU9SLEVBQXFCTyxLQUFLLEtBQU1GLEVBQW1CRyxLQUFLRCxLQUFLRixHLEtDN0N2RixJQUFJSSxFQUFzQi9ELEVBQW9CUSxPQUFFTCxFQUFXLENBQUMsTUFBTSxJQUFPSCxFQUFvQixPQUM3RitELEVBQXNCL0QsRUFBb0JRLEVBQUV1RCxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGFua2hzdTE5OTYuZ2l0aHViLmlvL3dlYnBhY2svcnVudGltZS9jaHVuayBsb2FkZWQiLCJ3ZWJwYWNrOi8vaGFua2hzdTE5OTYuZ2l0aHViLmlvL3dlYnBhY2svcnVudGltZS9jcmVhdGUgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2hhbmtoc3UxOTk2LmdpdGh1Yi5pby8uL3NyYy9jb21wb25lbnRzL0xvZ28vaW5kZXguanMiLCJ3ZWJwYWNrOi8vaGFua2hzdTE5OTYuZ2l0aHViLmlvLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyL2luZGV4LmpzIiwid2VicGFjazovL2hhbmtoc3UxOTk2LmdpdGh1Yi5pby8uL3NyYy9hc3NldHMvaW1hZ2VzL21pbG8tbWNkb3dlbGwtMzAyNy11bnNwbGFzaC5qcGciLCJ3ZWJwYWNrOi8vaGFua2hzdTE5OTYuZ2l0aHViLmlvLy4vc3JjL2NvbXBvbmVudHMvSG9tZUNvdmVyL2luZGV4LmpzIiwid2VicGFjazovL2hhbmtoc3UxOTk2LmdpdGh1Yi5pby8uL3NyYy9jb21wb25lbnRzL0hvbWVDb250ZW50L2luZGV4LmpzIiwid2VicGFjazovL2hhbmtoc3UxOTk2LmdpdGh1Yi5pby8uL3NyYy9jb21wb25lbnRzL0Zvb3Rlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9oYW5raHN1MTk5Ni5naXRodWIuaW8vLi9zcmMvbGF5b3V0cy9Ib21lUGFnZS5qcyIsIndlYnBhY2s6Ly9oYW5raHN1MTk5Ni5naXRodWIuaW8vLi9zcmMvY29tcG9uZW50cy9NeUxhenlMb2FkSW1hZ2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vaGFua2hzdTE5OTYuZ2l0aHViLmlvLy4vc3JjL2Fzc2V0cy9pbWFnZXMvYXV0aG9yLmpwZyIsIndlYnBhY2s6Ly9oYW5raHN1MTk5Ni5naXRodWIuaW8vLi9zcmMvY29tcG9uZW50cy9BdXRob3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vaGFua2hzdTE5OTYuZ2l0aHViLmlvLy4vc3JjL2NvbXBvbmVudHMvUHJvamVjdEl0ZW0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vaGFua2hzdTE5OTYuZ2l0aHViLmlvLy4vc3JjL2xheW91dHMvUHJvamVjdHNQYWdlLmpzIiwid2VicGFjazovL2hhbmtoc3UxOTk2LmdpdGh1Yi5pby8uL3NyYy9sYXlvdXRzL1RhZ1BhZ2UuanMiLCJ3ZWJwYWNrOi8vaGFua2hzdTE5OTYuZ2l0aHViLmlvLy4vc3JjL2NvbXBvbmVudHMvQ29udGFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9oYW5raHN1MTk5Ni5naXRodWIuaW8vLi9zcmMvbGF5b3V0cy9Db250YWN0UGFnZS5qcyIsIndlYnBhY2s6Ly9oYW5raHN1MTk5Ni5naXRodWIuaW8vLi9zcmMvY29tcG9uZW50cy9QYWdlTm90Rm91bmRDb250ZW50L2luZGV4LmpzIiwid2VicGFjazovL2hhbmtoc3UxOTk2LmdpdGh1Yi5pby8uL3NyYy9sYXlvdXRzL05vdEZvdW5kUGFnZS5qcyIsIndlYnBhY2s6Ly9oYW5raHN1MTk5Ni5naXRodWIuaW8vLi9zcmMvQXBwLmpzIiwid2VicGFjazovL2hhbmtoc3UxOTk2LmdpdGh1Yi5pby8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9oYW5raHN1MTk5Ni5naXRodWIuaW8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vaGFua2hzdTE5OTYuZ2l0aHViLmlvL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2hhbmtoc3UxOTk2LmdpdGh1Yi5pby93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vaGFua2hzdTE5OTYuZ2l0aHViLmlvL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vaGFua2hzdTE5OTYuZ2l0aHViLmlvL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vaGFua2hzdTE5OTYuZ2l0aHViLmlvL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2hhbmtoc3UxOTk2LmdpdGh1Yi5pby93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9oYW5raHN1MTk5Ni5naXRodWIuaW8vd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBkZWZlcnJlZCA9IFtdO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5PID0gKHJlc3VsdCwgY2h1bmtJZHMsIGZuLCBwcmlvcml0eSkgPT4ge1xuXHRpZihjaHVua0lkcykge1xuXHRcdHByaW9yaXR5ID0gcHJpb3JpdHkgfHwgMDtcblx0XHRmb3IodmFyIGkgPSBkZWZlcnJlZC5sZW5ndGg7IGkgPiAwICYmIGRlZmVycmVkW2kgLSAxXVsyXSA+IHByaW9yaXR5OyBpLS0pIGRlZmVycmVkW2ldID0gZGVmZXJyZWRbaSAtIDFdO1xuXHRcdGRlZmVycmVkW2ldID0gW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldO1xuXHRcdHJldHVybjtcblx0fVxuXHR2YXIgbm90RnVsZmlsbGVkID0gSW5maW5pdHk7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWQubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgW2NodW5rSWRzLCBmbiwgcHJpb3JpdHldID0gZGVmZXJyZWRbaV07XG5cdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBjaHVua0lkcy5sZW5ndGg7IGorKykge1xuXHRcdFx0aWYgKChwcmlvcml0eSAmIDEgPT09IDAgfHwgbm90RnVsZmlsbGVkID49IHByaW9yaXR5KSAmJiBPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLk8pLmV2ZXJ5KChrZXkpID0+IChfX3dlYnBhY2tfcmVxdWlyZV9fLk9ba2V5XShjaHVua0lkc1tqXSkpKSkge1xuXHRcdFx0XHRjaHVua0lkcy5zcGxpY2Uoai0tLCAxKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZ1bGZpbGxlZCA9IGZhbHNlO1xuXHRcdFx0XHRpZihwcmlvcml0eSA8IG5vdEZ1bGZpbGxlZCkgbm90RnVsZmlsbGVkID0gcHJpb3JpdHk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmKGZ1bGZpbGxlZCkge1xuXHRcdFx0ZGVmZXJyZWQuc3BsaWNlKGktLSwgMSlcblx0XHRcdHZhciByID0gZm4oKTtcblx0XHRcdGlmIChyICE9PSB1bmRlZmluZWQpIHJlc3VsdCA9IHI7XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZXN1bHQ7XG59OyIsInZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiA/IChvYmopID0+IChPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSkgOiAob2JqKSA9PiAob2JqLl9fcHJvdG9fXyk7XG52YXIgbGVhZlByb3RvdHlwZXM7XG4vLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3Rcbi8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLy8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4vLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3Rcbi8vIG1vZGUgJiAxNjogcmV0dXJuIHZhbHVlIHdoZW4gaXQncyBQcm9taXNlLWxpa2Vcbi8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbl9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG5cdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IHRoaXModmFsdWUpO1xuXHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuXHRpZih0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlKSB7XG5cdFx0aWYoKG1vZGUgJiA0KSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG5cdFx0aWYoKG1vZGUgJiAxNikgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicpIHJldHVybiB2YWx1ZTtcblx0fVxuXHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuXHR2YXIgZGVmID0ge307XG5cdGxlYWZQcm90b3R5cGVzID0gbGVhZlByb3RvdHlwZXMgfHwgW251bGwsIGdldFByb3RvKHt9KSwgZ2V0UHJvdG8oW10pLCBnZXRQcm90byhnZXRQcm90byldO1xuXHRmb3IodmFyIGN1cnJlbnQgPSBtb2RlICYgMiAmJiB2YWx1ZTsgdHlwZW9mIGN1cnJlbnQgPT0gJ29iamVjdCcgJiYgIX5sZWFmUHJvdG90eXBlcy5pbmRleE9mKGN1cnJlbnQpOyBjdXJyZW50ID0gZ2V0UHJvdG8oY3VycmVudCkpIHtcblx0XHRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjdXJyZW50KS5mb3JFYWNoKChrZXkpID0+IChkZWZba2V5XSA9ICgpID0+ICh2YWx1ZVtrZXldKSkpO1xuXHR9XG5cdGRlZlsnZGVmYXVsdCddID0gKCkgPT4gKHZhbHVlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBkZWYpO1xuXHRyZXR1cm4gbnM7XG59OyIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IExpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5pbXBvcnQgXCIuL3N0eWxlLnNjc3NcIjtcblxuY29uc3QgTG9nbyA9IChwcm9wcykgPT4ge1xuICBjb25zdCBmdWxsQ2xhc3NOYW1lID0gYGxvZ28gbG9nby0ke3Byb3BzLmNvbG9yfSBsb2dvLSR7cHJvcHMuc2l6ZX1gO1xuXG4gIGNvbnN0IGxvZ29UZXh0ID0gKFxuICAgIDxzcGFuIGNsYXNzTmFtZT1cImxvZ28tdGV4dFwiPlxuICAgICAgPGk+XG4gICAgICAgICZsdDt7cHJvcHMuY2hpbGRyZW59XG4gICAgICAgIDxzcGFuPi88L3NwYW4+Jmd0O1xuICAgICAgPC9pPlxuICAgIDwvc3Bhbj5cbiAgKTtcblxuICBjb25zdCBfZGlzYWJsZU1vYmlsZVByZXNzID0gKGUpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIGlmIChwcm9wcy5jbGlja2FibGUpXG4gICAgcmV0dXJuIChcbiAgICAgIDxMaW5rXG4gICAgICAgIHRvPXtcIi9cIn1cbiAgICAgICAgY2xhc3NOYW1lPXtmdWxsQ2xhc3NOYW1lfVxuICAgICAgICBvbkNvbnRleHRNZW51PXtfZGlzYWJsZU1vYmlsZVByZXNzfVxuICAgICAgPlxuICAgICAgICB7bG9nb1RleHR9XG4gICAgICA8L0xpbms+XG4gICAgKTtcbiAgZWxzZSByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2Z1bGxDbGFzc05hbWV9Pntsb2dvVGV4dH08L2Rpdj47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2dvO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTGluaywgdXNlTG9jYXRpb24gfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5pbXBvcnQgeyBGb250QXdlc29tZUljb24gfSBmcm9tIFwiQGZvcnRhd2Vzb21lL3JlYWN0LWZvbnRhd2Vzb21lXCI7XG5pbXBvcnQgeyBmYUJhcnMgfSBmcm9tIFwiQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zXCI7XG5cbmltcG9ydCBMb2dvIGZyb20gXCIuLi9Mb2dvXCI7XG5cbmltcG9ydCBcIi4vc3R5bGUuc2Nzc1wiO1xuXG4vLyBUaGUgd2lkdGggaXMgdGhlIHBsYWNlaG9sZGVyIGZvciB0aGUgd2lkdGggb2YgdGhlIGRlc2t0b3AgbWVudS5cbi8vIEl0J3MgdGhlIHdpZHRoIHdoZW4gdGhlIGl0ZW0gaXMgb2YgZm9udCBzaXplIDE0cHggYW5kIGZvbnQgd2VpZ2h0IDUwMC5cbmNvbnN0IGRhdGEgPSBbXG4gIHtcbiAgICB0bzogXCIvXCIsXG4gICAgdGl0bGU6IFwiSG9tZVwiLFxuICAgIHdpZHRoOiAzOC41NSxcbiAgfSxcbiAge1xuICAgIHRvOiBcIi9wcm9qZWN0c1wiLFxuICAgIHRpdGxlOiBcIlByb2plY3RzXCIsXG4gICAgd2lkdGg6IDUzLjQ1LFxuICB9LFxuICB7XG4gICAgdG86IFwiL2NvbnRhY3RcIixcbiAgICB0aXRsZTogXCJDb250YWN0XCIsXG4gICAgd2lkdGg6IDUxLjEsXG4gIH0sXG5dO1xuXG5jb25zdCBNZW51SXRlbXMgPSAocHJvcHMpID0+IHtcbiAgY29uc3QgbWVudUl0ZW1zID0gZGF0YS5tYXAoKGl0ZW0pID0+IHtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IGl0ZW0udG8gPT09IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcbiAgICBjb25zdCBjbGFzc05hbWUgPSBpc0FjdGl2ZSA/IFwibWVudS1pdGVtIG1lbnUtaXRlbS1jdXJyZW50XCIgOiBcIm1lbnUtaXRlbVwiO1xuICAgIHJldHVybiAoXG4gICAgICA8TGlua1xuICAgICAgICBrZXk9e2l0ZW0udG99XG4gICAgICAgIHRvPXtpdGVtLnRvfVxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzTmFtZX1cbiAgICAgICAgc3R5bGU9e1xuICAgICAgICAgIHByb3BzLmZpeFdpZHRoXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogaXRlbS53aWR0aCArIDEsIC8vIEF2b2lkIG92ZXJmbG93XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDoge31cbiAgICAgICAgfVxuICAgICAgPlxuICAgICAgICB7aXRlbS50aXRsZX1cbiAgICAgIDwvTGluaz5cbiAgICApO1xuICB9KTtcbiAgcmV0dXJuIDw+e21lbnVJdGVtc308Lz47XG59O1xuXG5jb25zdCBNYWluTmF2ID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxuYXYgY2xhc3NOYW1lPVwibWFpbi1uYXYgaGlkZGVuLXhzIGhpZGRlbi1zbSBcIj5cbiAgICAgIDxNZW51SXRlbXMgZml4V2lkdGggLz5cbiAgICA8L25hdj5cbiAgKTtcbn07XG5cbmNvbnN0IE1vYmlsZU1lbnUgPSAocHJvcHMpID0+IHtcbiAgY29uc3QgY2xhc3NOYW1lID0gcHJvcHMuaXNUb2dnbGVPblxuICAgID8gXCJwb3B1cC1vcGVuZWQgaGVhZGVyLW1lbnUgaGlkZGVuLW1kIGhpZGRlbi1sZyBoaWRkZW4teGxcIlxuICAgIDogXCJoZWFkZXItbWVudSBoaWRkZW4tbWQgaGlkZGVuLWxnIGhpZGRlbi14bFwiO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0+XG4gICAgICA8YnV0dG9uXG4gICAgICAgIGNsYXNzTmFtZT1cImJ1dHRvbiBoZWFkZXItYnV0dG9uIGhlYWRlci1idXR0b24tbWVudSBqcy1wb3B1cFwiXG4gICAgICAgIG9uQ2xpY2s9e3Byb3BzLmhhbmRsZUNsaWNrfVxuICAgICAgPlxuICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGljb249e2ZhQmFyc30gLz5cbiAgICAgIDwvYnV0dG9uPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3B1cFwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vYmlsZS1tZW51XCI+XG4gICAgICAgICAgPE1lbnVJdGVtcyAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuY29uc3QgSGVhZGVyID0gKCkgPT4ge1xuICBjb25zdCBbaXNUb2dnbGVPbiwgc2V0VG9nZ2xlT25dID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG5cbiAgY29uc3QgdG9nZ2xlTWVudSA9ICgpID0+IHtcbiAgICBzZXRUb2dnbGVPbighaXNUb2dnbGVPbik7XG4gIH07XG5cbiAgY29uc3QgY2xvc2VNZW51ID0gKCkgPT4ge1xuICAgIHNldFRvZ2dsZU9uKGZhbHNlKTtcbiAgfTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHNldFRvZ2dsZU9uKGZhbHNlKTtcbiAgICB3aW5kb3cuc2Nyb2xsVG8oeyB0b3A6IDAsIGJlaGF2aW9yOiBcInNtb290aFwiIH0pO1xuICB9LCBbbG9jYXRpb25dKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGhhbmRsZUNsaWNrID0gKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0LmNsb3Nlc3QoXCIuaGVhZGVyLWJ1dHRvblwiKSkge1xuICAgICAgICB0b2dnbGVNZW51KCk7XG4gICAgICB9IGVsc2UgaWYgKCFldmVudC50YXJnZXQuY2xvc2VzdChcIi5wb3B1cFwiKSkge1xuICAgICAgICBjbG9zZU1lbnUoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVDbGljayk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVDbGljayk7XG4gICAgfTtcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8aGVhZGVyIGNsYXNzTmFtZT1cInNpdGUtaGVhZGVyIGNvbnRhaW5lclwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXItbGVmdFwiPlxuICAgICAgICA8TG9nbyBjbGlja2FibGUgY29sb3I9XCJkYXJrXCIgc2l6ZT1cInNtXCI+XG4gICAgICAgICAgU0xIXG4gICAgICAgIDwvTG9nbz5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXItcmlnaHRcIj5cbiAgICAgICAgPE1haW5OYXYgLz5cbiAgICAgICAgPE1vYmlsZU1lbnUgaXNUb2dnbGVPbj17aXNUb2dnbGVPbn0gLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvaGVhZGVyPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSGVhZGVyO1xuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltYWdlcy81NDAyMzlkOWY0MDc2YzJkZWI0MWFkMjQ3ZDlmNTBkZi1taWxvLW1jZG93ZWxsLTMwMjctdW5zcGxhc2guanBnXCI7IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IENvdmVySW1hZ2UgZnJvbSBcIi4uLy4uL2Fzc2V0cy9pbWFnZXMvbWlsby1tY2Rvd2VsbC0zMDI3LXVuc3BsYXNoLmpwZ1wiO1xuaW1wb3J0IHsgTGF6eUxvYWRJbWFnZSB9IGZyb20gXCJyZWFjdC1sYXp5LWxvYWQtaW1hZ2UtY29tcG9uZW50XCI7XG5cbmltcG9ydCBMb2dvIGZyb20gXCIuLi9Mb2dvXCI7XG5cbmltcG9ydCBcIi4vc3R5bGUuc2Nzc1wiO1xuXG5jb25zdCBIb21lQ292ZXIgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJob21lLWNvdmVyIGNvbnRhaW5lclwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaXRlLWNvdmVyIHUtb3ZlcmxheVwiPlxuICAgICAgICA8TGF6eUxvYWRJbWFnZVxuICAgICAgICAgIGNsYXNzTmFtZT1cImNvdmVyLWltYWdlIGphcmFsbGF4LWltZyB1LW9iamVjdC1maXRcIlxuICAgICAgICAgIHNyYz17Q292ZXJJbWFnZX1cbiAgICAgICAgICBhbHQ9XCJXYXZlXCJcbiAgICAgICAgICB3aWR0aD1cIjE5MjBweFwiXG4gICAgICAgICAgaGVpZ2h0PVwiMTA4MHB4XCJcbiAgICAgICAgICBhZnRlckxvYWQ9eygpID0+IHtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuc2l0ZS1jb3ZlclwiKS5jbGFzc0xpc3QuYWRkKFwiaW5pdGlhbGl6ZWRcIik7XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb3Zlci1jb250ZW50XCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb3Zlci1sb2dvXCI+XG4gICAgICAgICAgICA8TG9nbyBjb2xvcj1cImxpZ2h0XCIgc2l6ZT1cImxnXCI+XG4gICAgICAgICAgICAgIFNMSFxuICAgICAgICAgICAgPC9Mb2dvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY292ZXItZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgIFNob3UtTGkgSHN1J3MgcGVyc29uYWwgd2Vic2l0ZS4gQSBwbGFjZSB0byBpbnRyb2R1Y2UgbXlzZWxmIGFuZFxuICAgICAgICAgICAgc2hhcmUgbXkgdGhvdWdodHMuXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBIb21lQ292ZXI7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBcIi4vc3R5bGUuc2Nzc1wiO1xuXG5jb25zdCBIb21lQ29udGVudCA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInNpdGUtY29udGVudFwiPlxuICAgICAgPG1haW4gY2xhc3NOYW1lPVwic2l0ZS1tYWluXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9zdC1jb250ZW50IGdoLWNvbnRlbnQga2ctY2FudmFzXCI+XG4gICAgICAgICAgPGgyIGlkPVwiYWJvdXRcIj5BYm91dDwvaDI+XG4gICAgICAgICAgPHA+XG4gICAgICAgICAgICBTaG91LUxpIEhzdSBpcyBhIFRhaXdhbmVzZSBkaWdpdGFsIGNpcmN1aXQgZGVzaWduZXIgc3BlY2lhbGl6ZWQgaW5cbiAgICAgICAgICAgIENQVSBkZXNpZ24gYW5kIHRyYW5zaXN0b3ItbGV2ZWwgVkxTSS4gSGlzIGJhY2tncm91bmQgaXMgaW4gbW1XYXZlXG4gICAgICAgICAgICBJQywgY2VsbC1iYXNlZCBkaWdpdGFsIElDLCBhbmQgZnVsbC1jdXN0b20gZGlnaXRhbCBJQy5cbiAgICAgICAgICA8L3A+XG4gICAgICAgICAgPHA+XG4gICAgICAgICAgICBIZSByZWNlaXZlZCBoaXMgYmFjaGVsb3LigJlzIGRlZ3JlZSBhdCBOYXRpb25hbCBUYWl3YW4gVW5pdmVyc2l0eSxcbiAgICAgICAgICAgIFRhaXBlaSwgVGFpd2FuLCBhbmQgaGlzIG1hc3RlcuKAmXMgZGVncmVlIGF0IFVuaXZlcnNpdHkgb2YgTWljaGlnYW4sXG4gICAgICAgICAgICBBbm4gQXJib3IsIE1JLCBVU0EuXG4gICAgICAgICAgPC9wPlxuICAgICAgICAgIDxwPlxuICAgICAgICAgICAgSGUgd29ya2VkIGluIE1lbXJ5WCBJbmMgYXMgYW4gaW50ZWdyYXRlZCBjaXJjdWl0IGVuZ2luZWVyIGludGVybi4gSGVcbiAgICAgICAgICAgIHdhcyBhbHNvIGVtcGxveWVkIGluIFRyb24gRnV0dXJlIFRlY2ggYXMgYSBkaWdpdGFsIGRlc2lnbiBlbmdpbmVlclxuICAgICAgICAgICAgaW50ZXJuLiBIZSBpcyBjdXJyZW50bHkgZW1wbG95ZWQgYnkgSW50ZWwgYXMgYSBmdWxsLXRpbWUgQ1BVIFJUTFxuICAgICAgICAgICAgZGVzaWduIGVuZ2luZWVyIGluIEhpbGxzYm9ybywgT1IsIFVTQS5cbiAgICAgICAgICA8L3A+XG5cbiAgICAgICAgICA8aDIgaWQ9XCJ3b3JrXCI+V29yayBFeHBlcmllbmNlPC9oMj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndvcmstaXRlbVwiPlxuICAgICAgICAgICAgPGgzPk1lbXJ5WCBJbmM8L2gzPlxuICAgICAgICAgICAgPGg0PklDIERlc2lnbiBJbnRlcm4gfCBNYXkgMjAyMSDigJMgQXVnLiAyMDIxPC9oND5cbiAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICBPcHRpbWl6ZWQgdGhlIG1pY3JvYXJjaGl0ZWN0dXJlIG9mIHRoZSBpbnRlci1sYXllciBjb21tdW5pY2F0aW9uXG4gICAgICAgICAgICAgIG1vZHVsZSBpbiBhbiBBSSBjaGlwIGFuZCBhY2hpZXZlZCA1MCUgYXJlYSByZWR1Y3Rpb24uIEludGVncmF0ZWRcbiAgICAgICAgICAgICAgdGhlIEFJIGNvcmUsIEFSTSBDb3J0ZXgtTTMgcHJvY2Vzc29yLCBhbmQgcGVyaXBoZXJhbHMgaW50byBhbiBTb0NcbiAgICAgICAgICAgICAgYW5kIHBlcmZvcm1lZCBjaGlwLWxldmVsIHZlcmlmaWNhdGlvbi5cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid29yay1pdGVtXCI+XG4gICAgICAgICAgICA8aDM+VHJvbiBGdXR1cmUgVGVjaDwvaDM+XG4gICAgICAgICAgICA8aDQ+RGlnaXRhbCBEZXNpZ24gSW50ZXJuIHwgSnVuZSAyMDIwIOKAkyBOb3YuIDIwMjA8L2g0PlxuICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgIFByb3RvdHlwZWQgYSBjb21tdW5pY2F0aW9uIElQIG9uIFhpbGlueCBGUEdBcyBhbmQgaW50ZWdyYXRlZCBpdFxuICAgICAgICAgICAgICBpbnRvIGEgdHJhbnNtaXR0ZXIgc3lzdGVtLiBEZXZlbG9wZWQgc2luZ2xlLWV2ZW50IHVwc2V0IHByb3RlY3Rpb25cbiAgICAgICAgICAgICAgbWVjaGFuaXNtcyBmb3IgU1JBTS1iYXNlZCBGUEdBcy5cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxoMiBpZD1cImVkdWNhdGlvblwiPkVkdWNhdGlvbjwvaDI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZHVjYXRpb24taXRlbVwiPlxuICAgICAgICAgICAgPGgzPlVuaXZlcnNpdHkgb2YgTWljaGlnYW48L2gzPlxuICAgICAgICAgICAgPGg0PkFubiBBcmJvciwgTUksIFVTQSB8IFNlcHQuIDIwMjAg4oCTIEFwci4gMjAyMjwvaDQ+XG4gICAgICAgICAgICA8cD5NLlMuIG1ham9yaW5nIGluIEVsZWN0cmljYWwgYW5kIENvbXB1dGVyIEVuZ2luZWVyaW5nLjwvcD5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWR1Y2F0aW9uLWl0ZW1cIj5cbiAgICAgICAgICAgIDxoMz5OYXRpb25hbCBUYWl3YW4gVW5pdmVyc2l0eTwvaDM+XG4gICAgICAgICAgICA8aDQ+VGFpcGVpLCBUYWl3YW4gfCBTZXB0LiAyMDE0IOKAkyBKdW5lIDIwMTk8L2g0PlxuICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgIEIuUy4gZG91YmxlIG1ham9yaW5nIGluIEVsZWN0cmljYWwgRW5naW5lZXJpbmcgYW5kIE1lY2hhbmljYWxcbiAgICAgICAgICAgICAgRW5naW5lZXJpbmcuXG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9tYWluPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgSG9tZUNvbnRlbnQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBGb250QXdlc29tZUljb24gfSBmcm9tIFwiQGZvcnRhd2Vzb21lL3JlYWN0LWZvbnRhd2Vzb21lXCI7XG5cbmltcG9ydCBzdWJzY3JpYmVzIGZyb20gXCIuLi8uLi9kYXRhL3N1YnNjcmliZXMuanNvblwiO1xuXG5pbXBvcnQgXCIuL3N0eWxlLnNjc3NcIjtcblxuY29uc3QgU3Vic2NyaWJlID0gKCkgPT4ge1xuICBjb25zdCBzdWJzY3JpYmVJdGVtcyA9IHN1YnNjcmliZXMubWFwKChzdWIpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPGFcbiAgICAgICAga2V5PXtzdWIubmFtZX1cbiAgICAgICAgaHJlZj17c3ViLmhyZWZ9XG4gICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgIGNsYXNzTmFtZT1cInN1YnNjcmliZS1saW5rXCJcbiAgICAgID5cbiAgICAgICAgPEZvbnRBd2Vzb21lSWNvblxuICAgICAgICAgIGljb249e1tcImZhLWJyYW5kc1wiLCBzdWIuaWNvbl19XG4gICAgICAgICAgY2xhc3NOYW1lPXtgaWNvbiBpY29uLSR7c3ViLm5hbWV9YH1cbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgZm9udFNpemU6IHN1Yi5pY29uU2l6ZSxcbiAgICAgICAgICAgIHBhZGRpbmdCb3R0b206IHN1Yi5pY29uUGFkZGluZ0JvdHRvbSxcbiAgICAgICAgICAgIGNvbG9yOiBzdWIuaWNvbkNvbG9yLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICAgIDxzcGFuXG4gICAgICAgICAgY2xhc3NOYW1lPVwic3Vic2NyaWJlLXRleHRcIlxuICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICBtYXJnaW5MZWZ0OiBzdWIuaWNvblRleHRTcGFjaW5nLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7c3ViLnRpdGxlfVxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L2E+XG4gICAgKTtcbiAgfSk7XG5cbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwic3Vic2NyaWJlXCI+e3N1YnNjcmliZUl0ZW1zfTwvZGl2Pjtcbn07XG5cbmNvbnN0IENvcHlyaWdodCA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImNvcHlyaWdodFwiPlxuICAgICAgPHA+U2hvdS1MaSBIc3UgwqkgMjAyMjwvcD5cbiAgICAgIDxwPlxuICAgICAgICBUaGVtZSBieXtcIiBcIn1cbiAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vZ2l0aHViLmNvbS9UcnlHaG9zdC9XYXZlXCIgdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgICAgR2hvc3RcbiAgICAgICAgPC9hPlxuICAgICAgPC9wPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuY29uc3QgRm9vdGVyID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxmb290ZXIgY2xhc3NOYW1lPVwic2l0ZS1mb290ZXIgY29udGFpbmVyIG1lZGl1bVwiPlxuICAgICAgPFN1YnNjcmliZSAvPlxuICAgICAgPENvcHlyaWdodCAvPlxuICAgIDwvZm9vdGVyPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRm9vdGVyO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IEhlYWRlciBmcm9tIFwiLi4vY29tcG9uZW50cy9IZWFkZXJcIjtcbmltcG9ydCBIb21lQ292ZXIgZnJvbSBcIi4uL2NvbXBvbmVudHMvSG9tZUNvdmVyXCI7XG5pbXBvcnQgSG9tZUNvbnRlbnQgZnJvbSBcIi4uL2NvbXBvbmVudHMvSG9tZUNvbnRlbnRcIjtcbmltcG9ydCBGb290ZXIgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9vdGVyXCI7XG5cbmNvbnN0IEhvbWVQYWdlID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8SGVhZGVyIC8+XG4gICAgICA8SG9tZUNvdmVyIC8+XG4gICAgICA8SG9tZUNvbnRlbnQgLz5cbiAgICAgIDxGb290ZXIgLz5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEhvbWVQYWdlO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTGF6eUxvYWRJbWFnZSB9IGZyb20gXCJyZWFjdC1sYXp5LWxvYWQtaW1hZ2UtY29tcG9uZW50XCI7XG5cbmltcG9ydCBcIi4vc3R5bGUuc2Nzc1wiO1xuXG5jb25zdCBNeUxhenlMb2FkSW1hZ2UgPSAocHJvcHMpID0+IHtcbiAgY29uc3QgcmVmID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBjb25zdCBjbGFzc05hbWUgPSBgJHtwcm9wcy5jbGFzc05hbWV9IGxhenlsb2FkYDtcbiAgY29uc3Qgc3RhcnRUaW1lID0gbmV3IERhdGUoKTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IHJlZj17cmVmfT5cbiAgICAgIDxMYXp5TG9hZEltYWdlXG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICBzcmM9e3Byb3BzLnNyY31cbiAgICAgICAgYWx0PXtwcm9wcy5hbHR9XG4gICAgICAgIGFmdGVyTG9hZD17KCkgPT4ge1xuICAgICAgICAgIGNvbnN0IGVuZFRpbWUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgIGNvbnN0IHRpbWUgPSBlbmRUaW1lIC0gc3RhcnRUaW1lO1xuICAgICAgICAgIGNvbnN0IG1pbkRlbGF5ID0gcHJvcHMubWluRGVsYXkgfHwgMDtcbiAgICAgICAgICBjb25zdCBkZWxheSA9IE1hdGgubWF4KG1pbkRlbGF5IC0gdGltZSwgMCk7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbWcgPSByZWYuY3VycmVudC5jaGlsZHJlblswXTtcbiAgICAgICAgICAgIGltZy5jbGFzc0xpc3QucmVtb3ZlKFwibGF6eWxvYWRcIik7XG4gICAgICAgICAgICBpbWcuY2xhc3NMaXN0LmFkZChcImxhenlsb2FkZWRcIik7XG4gICAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICB9fVxuICAgICAgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE15TGF6eUxvYWRJbWFnZTtcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWFnZXMvMGRhODk3YTFmMTA3OWU0ZDJhYTBiYzM3ZTgxMWM5OTktYXV0aG9yLmpwZ1wiOyIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IE15TGF6eUxvYWRJbWFnZSBmcm9tIFwiLi4vTXlMYXp5TG9hZEltYWdlXCI7XG5pbXBvcnQgQXV0aG9ySW1hZ2UgZnJvbSBcIi4uLy4uL2Fzc2V0cy9pbWFnZXMvYXV0aG9yLmpwZ1wiO1xuXG5pbXBvcnQgXCIuL3N0eWxlLnNjc3NcIjtcblxuY29uc3QgQXV0aG9yID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwidGVybS1hdXRob3JcIj5cbiAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cImF1dGhvclwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImF1dGhvci1pbWFnZS1wbGFjZWhvbGRlciB1LXBsYWNlaG9sZGVyXCI+XG4gICAgICAgICAgPE15TGF6eUxvYWRJbWFnZVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYXV0aG9yLWltYWdlIHUtb2JqZWN0LWZpdCBscy1pcy1jYWNoZWRcIlxuICAgICAgICAgICAgc3JjPXtBdXRob3JJbWFnZX1cbiAgICAgICAgICAgIGFsdD1cIlNob3UtTGkgSHN1XCJcbiAgICAgICAgICAgIG1pbkRlbGF5PXszMDB9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYXV0aG9yLXdyYXBwZXJcIj5cbiAgICAgICAgICA8aGVhZGVyIGNsYXNzTmFtZT1cImF1dGhvci1oZWFkZXJcIj5cbiAgICAgICAgICAgIDxoNCBjbGFzc05hbWU9XCJhdXRob3ItbmFtZVwiPlNob3UtTGkgSHN1PC9oND5cbiAgICAgICAgICA8L2hlYWRlcj5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJhdXRob3ItbWV0YVwiPkludGVsIENQVSBEZXNpZ24gRW5naW5lZXIgPC9zcGFuPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYXV0aG9yLWJpb1wiPlxuICAgICAgICAgICAgSGVyZSBhcmUgc29tZSBvZiB0aGUgcHJvamVjdHMgSSd2ZSB3b3JrZWQgb24uIFRoZSByZWFkIG1vcmUgYnV0dG9uc1xuICAgICAgICAgICAgYXJlIG5vdCB3b3JraW5nIHlldC5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3NlY3Rpb24+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBdXRob3I7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuaW1wb3J0IHsgRm9udEF3ZXNvbWVJY29uIH0gZnJvbSBcIkBmb3J0YXdlc29tZS9yZWFjdC1mb250YXdlc29tZVwiO1xuaW1wb3J0IHsgZmFDaGV2cm9uUmlnaHQgfSBmcm9tIFwiQGZvcnRhd2Vzb21lL2ZyZWUtc29saWQtc3ZnLWljb25zXCI7XG5cbmltcG9ydCBNeUxhenlMb2FkSW1hZ2UgZnJvbSBcIi4uL015TGF6eUxvYWRJbWFnZVwiO1xuXG5pbXBvcnQgXCIuL3N0eWxlLnNjc3NcIjtcblxuY29uc3QgUHJvamVjdEl0ZW0gPSAocHJvcHMpID0+IHtcbiAgY29uc3QgeyB0aXRsZSwgZXhjZXJwdCwgZGF0ZSwgdGFnLCBpbWdfc3JjLCBsaW5rIH0gPSBwcm9wcy5kYXRhO1xuXG4gIHJldHVybiAoXG4gICAgPGFydGljbGUgY2xhc3NOYW1lPXtcInBvc3QgdGFnLXRlY2hub2xvZ3lcIn0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvc3QtbWVkaWEganMtcGxheVwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInUtcGxhY2Vob2xkZXIgc3F1YXJlXCI+XG4gICAgICAgICAgPE15TGF6eUxvYWRJbWFnZVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwicG9zdC1pbWFnZSB1LW9iamVjdC1maXQgbGF6eWF1dG9zaXplcyBscy1pcy1jYWNoZWRcIlxuICAgICAgICAgICAgc3JjPXtpbWdfc3JjfVxuICAgICAgICAgICAgYWx0PXt0aXRsZX1cbiAgICAgICAgICAgIG1pbkRlbGF5PXs1MH1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3N0LXdyYXBwZXJcIj5cbiAgICAgICAgPGhlYWRlciBjbGFzc05hbWU9XCJwb3N0LWhlYWRlclwiPlxuICAgICAgICAgIDxoMiBjbGFzc05hbWU9XCJwb3N0LXRpdGxlXCI+XG4gICAgICAgICAgICA8TGluayBjbGFzc05hbWU9XCJwb3N0LXRpdGxlLWxpbmtcIiB0bz17bGlua30+XG4gICAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICAgIDwvTGluaz5cbiAgICAgICAgICA8L2gyPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicG9zdC1tZXRhXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJwb3N0LW1ldGEtaXRlbSBwb3N0LW1ldGEtZGF0ZVwiPlxuICAgICAgICAgICAgICA8dGltZSBkYXRlVGltZT17ZGF0ZX0+XG4gICAgICAgICAgICAgICAge25ldyBEYXRlKGRhdGUpLnRvTG9jYWxlU3RyaW5nKFwiZW4tVVNcIiwge1xuICAgICAgICAgICAgICAgICAgeWVhcjogXCJudW1lcmljXCIsXG4gICAgICAgICAgICAgICAgICBtb250aDogXCJzaG9ydFwiLFxuICAgICAgICAgICAgICAgICAgZGF5OiBcIm51bWVyaWNcIixcbiAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgPC90aW1lPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicG9zdC1tZXRhLWl0ZW0gcG9zdC1tZXRhLXRhZ3NcIj5cbiAgICAgICAgICAgICAgPExpbmtcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJwb3N0LXRhZyBwb3N0LXRhZy10ZWNobm9sb2d5XCJcbiAgICAgICAgICAgICAgICB0bz17YC90YWcvJHt0YWcudG9Mb3dlckNhc2UoKX1gfVxuICAgICAgICAgICAgICAgIHRpdGxlPXt0YWd9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7dGFnfVxuICAgICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvaGVhZGVyPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvc3QtZXhjZXJwdFwiPntleGNlcnB0fTwvZGl2PlxuICAgICAgICA8Zm9vdGVyIGNsYXNzTmFtZT1cInBvc3QtZm9vdGVyXCI+XG4gICAgICAgICAgPExpbmsgY2xhc3NOYW1lPVwiYnV0dG9uLXRleHQgcG9zdC1mb290ZXItbW9yZVwiIHRvPXtsaW5rfT5cbiAgICAgICAgICAgIDxGb250QXdlc29tZUljb25cbiAgICAgICAgICAgICAgaWNvbj17ZmFDaGV2cm9uUmlnaHR9XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImljb24gaWNvbi1jaGV2cm9uLXJpZ2h0XCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICBSZWFkIG1vcmUgTllJXG4gICAgICAgICAgPC9MaW5rPlxuICAgICAgICA8L2Zvb3Rlcj5cbiAgICAgIDwvZGl2PlxuICAgIDwvYXJ0aWNsZT5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFByb2plY3RJdGVtO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgSGVhZGVyIGZyb20gXCIuLi9jb21wb25lbnRzL0hlYWRlclwiO1xuaW1wb3J0IEF1dGhvciBmcm9tIFwiLi4vY29tcG9uZW50cy9BdXRob3JcIjtcbmltcG9ydCBQcm9qZWN0SXRlbSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qcm9qZWN0SXRlbVwiO1xuaW1wb3J0IEZvb3RlciBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb290ZXJcIjtcblxuaW1wb3J0IHByb2plY3RzIGZyb20gXCIuLi9kYXRhL3Byb2plY3RzLmpzb25cIjtcblxuY29uc3QgUHJvamVjdHNQYWdlID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8SGVhZGVyIC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInNpdGUtY29udGVudFwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnQtYXJlYVwiPlxuICAgICAgICAgIDxtYWluIGNsYXNzTmFtZT1cInNpdGUtbWFpbiBjb250YWluZXIgbWVkaXVtXCI+XG4gICAgICAgICAgICA8QXV0aG9yIC8+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBvc3QtZmVlZFwiPlxuICAgICAgICAgICAgICB7cHJvamVjdHNcbiAgICAgICAgICAgICAgICAuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGIuZGF0ZSkgLSBuZXcgRGF0ZShhLmRhdGUpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm1hcCgocG9zdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIDxQcm9qZWN0SXRlbSBkYXRhPXtwb3N0fSBrZXk9e3Bvc3QudGl0bGV9IC8+O1xuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9tYWluPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPEZvb3RlciAvPlxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvamVjdHNQYWdlO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlUGFyYW1zIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuaW1wb3J0IEhlYWRlciBmcm9tIFwiLi4vY29tcG9uZW50cy9IZWFkZXJcIjtcbmltcG9ydCBQcm9qZWN0SXRlbSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qcm9qZWN0SXRlbVwiO1xuaW1wb3J0IEZvb3RlciBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb290ZXJcIjtcblxuaW1wb3J0IHByb2plY3RzIGZyb20gXCIuLi9kYXRhL3Byb2plY3RzLmpzb25cIjtcblxuY29uc3QgVGFnUGFnZSA9ICgpID0+IHtcbiAgY29uc3QgcGFyYW1zID0gdXNlUGFyYW1zKCk7XG4gIGNvbnN0IF9wcm9qZWN0cyA9IHByb2plY3RzLmZpbHRlcihcbiAgICAocHJvaikgPT4gcHJvai50YWcudG9Mb3dlckNhc2UoKSA9PT0gcGFyYW1zLnRhZ1xuICApO1xuICBjb25zdCB0ZXJtTmFtZSA9IGBUYWc6ICR7cGFyYW1zLnRhZ31gO1xuICBjb25zdCB0ZXJtRGVzY3JpcHRpb24gPVxuICAgIF9wcm9qZWN0cy5sZW5ndGggPT09IDBcbiAgICAgID8gYFRoZXJlIGFyZSBubyBwcm9qZWN0cyB3aXRoIHRoZSB0YWcgJHtwYXJhbXMudGFnfS5gXG4gICAgICA6IGBBbGwgcHJvamVjdHMgdGFnZ2VkIHdpdGggJHtwYXJhbXMudGFnfS5gO1xuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxIZWFkZXIgLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2l0ZS1jb250ZW50XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGVudC1hcmVhXCI+XG4gICAgICAgICAgPG1haW4gY2xhc3NOYW1lPVwic2l0ZS1tYWluIGNvbnRhaW5lciBtZWRpdW1cIj5cbiAgICAgICAgICAgIDxzZWN0aW9uIGNsYXNzTmFtZT1cInRlcm1cIj5cbiAgICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cInRlcm0tbmFtZVwiPnt0ZXJtTmFtZX08L2gxPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRlcm0tZGVzY3JpcHRpb25cIj57dGVybURlc2NyaXB0aW9ufTwvZGl2PlxuICAgICAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwb3N0LWZlZWRcIj5cbiAgICAgICAgICAgICAge19wcm9qZWN0c1xuICAgICAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoYi5kYXRlKSAtIG5ldyBEYXRlKGEuZGF0ZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAubWFwKChwcm9qKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gPFByb2plY3RJdGVtIGRhdGE9e3Byb2p9IGtleT17cHJvai50aXRsZX0gLz47XG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L21haW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8Rm9vdGVyIC8+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUYWdQYWdlO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBGb250QXdlc29tZUljb24gfSBmcm9tIFwiQGZvcnRhd2Vzb21lL3JlYWN0LWZvbnRhd2Vzb21lXCI7XG5cbmltcG9ydCBcIi4vc3R5bGUuc2Nzc1wiO1xuXG5jb25zdCBDb250YWN0SGVhZGVyID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxoZWFkZXIgY2xhc3NOYW1lPVwiY29udGFjdC1oZWFkZXIgY29udGFpbmVyIG1lZGl1bVwiPlxuICAgICAgPGgxIGNsYXNzTmFtZT1cImNvbnRhY3QtdGl0bGVcIj5MZXQncyB3b3JrIHRvZ2V0aGVyITwvaDE+XG4gICAgICA8cCBjbGFzc05hbWU9XCJjb250YWN0LXN1YnRpdGxlXCI+XG4gICAgICAgIFRlbGwgbWUgYWJvdXQgeW91ciBwcm9qZWN0LCBvciBqdXN0IHNheSBoaSFcbiAgICAgIDwvcD5cbiAgICA8L2hlYWRlcj5cbiAgKTtcbn07XG5cbmNvbnN0IE1haWxNZSA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IGNsYXNzTmFtZT1cIm1haWwtbWUtd3JhcFwiPlxuICAgICAgPGEgY2xhc3NOYW1lPVwibWFpbC1tZVwiIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJtYWlsdG86aGFua2hzdUB1bWljaC5lZHVcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJpY29uLXdyYXBcIj5cbiAgICAgICAgICA8Rm9udEF3ZXNvbWVJY29uIGNsYXNzTmFtZT1cImljb25cIiBpY29uPXtbXCJmYXJcIiwgXCJlbnZlbG9wZVwiXX0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFpbC1tZS10ZXh0XCI+XG4gICAgICAgICAgPHA+TWFpbCBtZSBhdDwvcD5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJlbWFpbFwiPmhhbmtoc3VAdW1pY2guZWR1PC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvYT5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IENvbnRhY3QgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJzaXRlLWNvbnRlbnRcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGVudC1hcmVhXCI+XG4gICAgICAgIDxtYWluIGNsYXNzTmFtZT1cInNpdGUtbWFpblwiPlxuICAgICAgICAgIDxDb250YWN0SGVhZGVyIC8+XG4gICAgICAgICAgPE1haWxNZSAvPlxuICAgICAgICA8L21haW4+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRhY3Q7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgSGVhZGVyIGZyb20gXCIuLi9jb21wb25lbnRzL0hlYWRlclwiO1xuaW1wb3J0IENvbnRhY3QgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ29udGFjdFwiO1xuaW1wb3J0IEZvb3RlciBmcm9tIFwiLi4vY29tcG9uZW50cy9Gb290ZXJcIjtcblxuY29uc3QgQ29udGFjdFBhZ2UgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxIZWFkZXIgLz5cbiAgICAgIDxDb250YWN0IC8+XG4gICAgICA8Rm9vdGVyIC8+XG4gICAgPC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb250YWN0UGFnZTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IExvZ28gZnJvbSBcIi4uL0xvZ29cIjtcbmltcG9ydCBcIi4vc3R5bGUuc2Nzc1wiO1xuXG5jb25zdCBQYWdlTm90Rm91bmRDb250ZW50ID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyIHUtZmxleDEgdS1hbGlnbi12ZXJ0aWNhbFwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzaXRlLWNvdmVyLTQwNFwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvdmVyLWNvbnRlbnRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvdmVyLWxvZ29cIj5cbiAgICAgICAgICAgIDxMb2dvIGNsaWNrYWJsZT1cImZhbHNlXCIgY29sb3I9XCJkYXJrXCIgc2l6ZT1cImxnXCI+XG4gICAgICAgICAgICAgIDQwNFxuICAgICAgICAgICAgPC9Mb2dvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY292ZXItZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgIDxoMj5QYWdlIE5vdCBGb3VuZDwvaDI+XG4gICAgICAgICAgICA8cD5Tb3JyeSwgdGhlIHBhZ2UgeW91IGFyZSBsb29raW5nIGZvciBkb2VzIG5vdCBleGlzdC48L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQYWdlTm90Rm91bmRDb250ZW50O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IEhlYWRlciBmcm9tIFwiLi4vY29tcG9uZW50cy9IZWFkZXJcIjtcbmltcG9ydCBQYWdlTm90Rm91bmRDb250ZW50IGZyb20gXCIuLi9jb21wb25lbnRzL1BhZ2VOb3RGb3VuZENvbnRlbnRcIjtcbmltcG9ydCBGb290ZXIgZnJvbSBcIi4uL2NvbXBvbmVudHMvRm9vdGVyXCI7XG5cbmNvbnN0IE5vdEZvdW5kUGFnZSA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPEhlYWRlciAvPlxuICAgICAgPFBhZ2VOb3RGb3VuZENvbnRlbnQgLz5cbiAgICAgIDxGb290ZXIgLz5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5vdEZvdW5kUGFnZTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLCBSb3V0ZXMsIFJvdXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuaW1wb3J0IHsgbGlicmFyeSB9IGZyb20gXCJAZm9ydGF3ZXNvbWUvZm9udGF3ZXNvbWUtc3ZnLWNvcmVcIjtcbmltcG9ydCB7IGZhYiB9IGZyb20gXCJAZm9ydGF3ZXNvbWUvZnJlZS1icmFuZHMtc3ZnLWljb25zXCI7XG5pbXBvcnQgeyBmYXIgfSBmcm9tIFwiQGZvcnRhd2Vzb21lL2ZyZWUtcmVndWxhci1zdmctaWNvbnNcIjtcblxuaW1wb3J0IEhvbWVQYWdlIGZyb20gXCIuL2xheW91dHMvSG9tZVBhZ2VcIjtcbmltcG9ydCBQcm9qZWN0c1BhZ2UgZnJvbSBcIi4vbGF5b3V0cy9Qcm9qZWN0c1BhZ2VcIjtcbmltcG9ydCBUYWdQYWdlIGZyb20gXCIuL2xheW91dHMvVGFnUGFnZVwiO1xuaW1wb3J0IENvbnRhY3RQYWdlIGZyb20gXCIuL2xheW91dHMvQ29udGFjdFBhZ2VcIjtcbmltcG9ydCBOb3RGb3VuZFBhZ2UgZnJvbSBcIi4vbGF5b3V0cy9Ob3RGb3VuZFBhZ2VcIjtcblxuaW1wb3J0IFwiLi9zdHlsZS5zY3NzXCI7XG5cbmxpYnJhcnkuYWRkKGZhYiwgZmFyKTtcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxSb3V0ZXI+XG4gICAgICA8Um91dGVzPlxuICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9cIiBlbGVtZW50PXs8SG9tZVBhZ2UgLz59IC8+XG4gICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL3Byb2plY3RzXCIgZWxlbWVudD17PFByb2plY3RzUGFnZSAvPn0gLz5cbiAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvY29udGFjdFwiIGVsZW1lbnQ9ezxDb250YWN0UGFnZSAvPn0gLz5cbiAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvdGFnLzp0YWdcIiBlbGVtZW50PXs8VGFnUGFnZSAvPn0gLz5cbiAgICAgICAgPFJvdXRlIHBhdGg9XCIqXCIgZWxlbWVudD17PE5vdEZvdW5kUGFnZSAvPn0gLz5cbiAgICAgIDwvUm91dGVzPlxuICAgIDwvUm91dGVyPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICogYXMgUmVhY3RET01DbGllbnQgZnJvbSBcInJlYWN0LWRvbS9jbGllbnRcIjtcblxuaW1wb3J0IEFwcCBmcm9tIFwiLi9BcHBcIjtcblxuY29uc3Qgcm9vdCA9IFJlYWN0RE9NQ2xpZW50LmNyZWF0ZVJvb3QoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb290XCIpKTtcbnJvb3QucmVuZGVyKFxuICA8UmVhY3QuU3RyaWN0TW9kZT5cbiAgICA8QXBwIC8+XG4gIDwvUmVhY3QuU3RyaWN0TW9kZT5cbik7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQ4MjY6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbl9fd2VicGFja19yZXF1aXJlX18uTy5qID0gKGNodW5rSWQpID0+IChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPT09IDApO1xuXG4vLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbnZhciB3ZWJwYWNrSnNvbnBDYWxsYmFjayA9IChwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiwgZGF0YSkgPT4ge1xuXHR2YXIgW2NodW5rSWRzLCBtb3JlTW9kdWxlcywgcnVudGltZV0gPSBkYXRhO1xuXHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcblx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG5cdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDA7XG5cdGlmKGNodW5rSWRzLnNvbWUoKGlkKSA9PiAoaW5zdGFsbGVkQ2h1bmtzW2lkXSAhPT0gMCkpKSB7XG5cdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihydW50aW1lKSB2YXIgcmVzdWx0ID0gcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0fVxuXHRpZihwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbikgcGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24oZGF0YSk7XG5cdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKCk7XG5cdFx0fVxuXHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG5cdH1cblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uTyhyZXN1bHQpO1xufVxuXG52YXIgY2h1bmtMb2FkaW5nR2xvYmFsID0gc2VsZltcIndlYnBhY2tDaHVua2hhbmtoc3UxOTk2X2dpdGh1Yl9pb1wiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtoYW5raHN1MTk5Nl9naXRodWJfaW9cIl0gfHwgW107XG5jaHVua0xvYWRpbmdHbG9iYWwuZm9yRWFjaCh3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIDApKTtcbmNodW5rTG9hZGluZ0dsb2JhbC5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCBjaHVua0xvYWRpbmdHbG9iYWwucHVzaC5iaW5kKGNodW5rTG9hZGluZ0dsb2JhbCkpOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgZGVwZW5kcyBvbiBvdGhlciBsb2FkZWQgY2h1bmtzIGFuZCBleGVjdXRpb24gbmVlZCB0byBiZSBkZWxheWVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18uTyh1bmRlZmluZWQsIFsyNDJdLCAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXyg1NjUpKSlcbl9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLk8oX193ZWJwYWNrX2V4cG9ydHNfXyk7XG4iXSwibmFtZXMiOlsiZGVmZXJyZWQiLCJsZWFmUHJvdG90eXBlcyIsImdldFByb3RvIiwicHJvcHMiLCJmdWxsQ2xhc3NOYW1lIiwiY29sb3IiLCJzaXplIiwibG9nb1RleHQiLCJjbGFzc05hbWUiLCJjaGlsZHJlbiIsImNsaWNrYWJsZSIsInRvIiwib25Db250ZXh0TWVudSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImRhdGEiLCJ0aXRsZSIsIndpZHRoIiwiTWVudUl0ZW1zIiwibWVudUl0ZW1zIiwibWFwIiwiaXRlbSIsIndpbmRvdyIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJrZXkiLCJzdHlsZSIsImZpeFdpZHRoIiwiTWFpbk5hdiIsIk1vYmlsZU1lbnUiLCJpc1RvZ2dsZU9uIiwib25DbGljayIsImhhbmRsZUNsaWNrIiwiaWNvbiIsImZhQmFycyIsIlJlYWN0Iiwic2V0VG9nZ2xlT24iLCJ1c2VMb2NhdGlvbiIsInNjcm9sbFRvIiwidG9wIiwiYmVoYXZpb3IiLCJldmVudCIsInRhcmdldCIsImNsb3Nlc3QiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiTGF6eUxvYWRJbWFnZSIsInNyYyIsIkNvdmVySW1hZ2UiLCJhbHQiLCJoZWlnaHQiLCJhZnRlckxvYWQiLCJxdWVyeVNlbGVjdG9yIiwiY2xhc3NMaXN0IiwiYWRkIiwiaWQiLCJTdWJzY3JpYmUiLCJzdWJzY3JpYmVJdGVtcyIsInN1YnNjcmliZXMiLCJzdWIiLCJuYW1lIiwiaHJlZiIsImZvbnRTaXplIiwiaWNvblNpemUiLCJwYWRkaW5nQm90dG9tIiwiaWNvblBhZGRpbmdCb3R0b20iLCJpY29uQ29sb3IiLCJtYXJnaW5MZWZ0IiwiaWNvblRleHRTcGFjaW5nIiwiQ29weXJpZ2h0IiwicmVmIiwic3RhcnRUaW1lIiwiRGF0ZSIsInRpbWUiLCJtaW5EZWxheSIsImRlbGF5IiwiTWF0aCIsIm1heCIsInNldFRpbWVvdXQiLCJpbWciLCJjdXJyZW50IiwicmVtb3ZlIiwiQXV0aG9ySW1hZ2UiLCJleGNlcnB0IiwiZGF0ZSIsInRhZyIsImltZ19zcmMiLCJsaW5rIiwiZGF0ZVRpbWUiLCJ0b0xvY2FsZVN0cmluZyIsInllYXIiLCJtb250aCIsImRheSIsInRvTG93ZXJDYXNlIiwiZmFDaGV2cm9uUmlnaHQiLCJwcm9qZWN0cyIsImEiLCJiIiwicG9zdCIsInBhcmFtcyIsInVzZVBhcmFtcyIsIl9wcm9qZWN0cyIsInByb2oiLCJ0ZXJtTmFtZSIsInRlcm1EZXNjcmlwdGlvbiIsImxlbmd0aCIsInNvcnQiLCJDb250YWN0SGVhZGVyIiwiTWFpbE1lIiwibGlicmFyeSIsImZhYiIsImZhciIsImV4YWN0IiwicGF0aCIsImVsZW1lbnQiLCJSZWFjdERPTUNsaWVudCIsImdldEVsZW1lbnRCeUlkIiwicmVuZGVyIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJtIiwiTyIsInJlc3VsdCIsImNodW5rSWRzIiwiZm4iLCJwcmlvcml0eSIsIm5vdEZ1bGZpbGxlZCIsIkluZmluaXR5IiwiaSIsImZ1bGZpbGxlZCIsImoiLCJPYmplY3QiLCJrZXlzIiwiZXZlcnkiLCJzcGxpY2UiLCJyIiwibiIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmoiLCJ0IiwidmFsdWUiLCJtb2RlIiwidGhpcyIsInRoZW4iLCJucyIsImNyZWF0ZSIsImRlZiIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZm9yRWFjaCIsImRlZmluaXRpb24iLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwicCIsImluc3RhbGxlZENodW5rcyIsImNodW5rSWQiLCJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsInBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwic29tZSIsImNodW5rTG9hZGluZ0dsb2JhbCIsInNlbGYiLCJiaW5kIiwicHVzaCIsIl9fd2VicGFja19leHBvcnRzX18iXSwic291cmNlUm9vdCI6IiJ9