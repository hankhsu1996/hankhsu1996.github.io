(()=>{"use strict";var e,t,n,a={334:(e,t,n)=>{var a=n(540),i=n(338),r=n(976),o=n(767),s=n(107),l=n(875),c=n(897),m=n(784),d=n(188);const u=function(e){var t="logo logo-".concat(e.color," logo-").concat(e.size),n=a.createElement("span",{className:"logo-text"},a.createElement("i",null,"<",e.children,a.createElement("span",null,"/"),">"));return e.clickable?a.createElement(r.N_,{to:"/",className:t,onContextMenu:function(e){return e.preventDefault(),!1}},n):a.createElement("div",{className:t},n)};function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}var p=[{to:"/",title:"Home",width:38.55},{to:"/projects",title:"Projects",width:53.45},{to:"/contact",title:"Contact",width:51.1}],g=function(e){var t=p.map((function(t){var n=t.to===window.location.pathname?"menu-item menu-item-current":"menu-item";return a.createElement(r.N_,{key:t.to,to:t.to,className:n,style:e.fixWidth?{width:t.width+1}:{}},t.title)}));return a.createElement(a.Fragment,null,t)},f=function(){return a.createElement("nav",{className:"main-nav hidden-xs hidden-sm "},a.createElement(g,{fixWidth:!0}))},v=function(e){var t=e.isToggleOn?"popup-opened header-menu hidden-md hidden-lg hidden-xl":"header-menu hidden-md hidden-lg hidden-xl";return a.createElement("div",{className:t},a.createElement("button",{className:"button header-button header-button-menu js-popup",onClick:e.handleClick},a.createElement(m.g,{icon:d.ckx})),a.createElement("div",{className:"popup"},a.createElement("div",{className:"mobile-menu"},a.createElement(g,null))))};const E=function(){var e,t,n=(e=a.useState(!1),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,i,r,o,s=[],l=!0,c=!1;try{if(r=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(a=r.call(n)).done)&&(s.push(a.value),s.length!==t);l=!0);}catch(e){c=!0,i=e}finally{try{if(!l&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return h(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?h(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=n[0],r=n[1],s=(0,o.zy)();return a.useEffect((function(){r(!1),window.scrollTo({top:0,behavior:"smooth"})}),[s]),a.useEffect((function(){var e=function(e){e.target.closest(".header-button")?r(!i):e.target.closest(".popup")||r(!1)};return document.addEventListener("click",e),function(){document.removeEventListener("click",e)}})),a.createElement("header",{className:"site-header container"},a.createElement("div",{className:"header-left"},a.createElement(u,{clickable:!0,color:"dark",size:"sm"},"SLH")),a.createElement("div",{className:"header-right"},a.createElement(f,null),a.createElement(v,{isToggleOn:i})))},y=n.p+"images/540239d9f4076c2deb41ad247d9f50df-milo-mcdowell-3027-unsplash.jpg";var b=n(921);const w=function(){return a.createElement("div",{className:"home-cover container"},a.createElement("div",{className:"site-cover u-overlay"},a.createElement(b.LazyLoadImage,{className:"cover-image jarallax-img u-object-fit",src:y,alt:"Wave",width:"1920px",height:"1080px",onLoad:function(){document.querySelector(".site-cover").classList.add("initialized")}}),a.createElement("div",{className:"cover-content"},a.createElement("div",{className:"cover-logo"},a.createElement(u,{color:"light",size:"lg"},"SLH")),a.createElement("div",{className:"cover-description"},"Shou-Li Hsu's personal website. A place to introduce myself and share my thoughts."))))};var S=n(514),N=n(832);function k(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var a,i,r,o,s=[],l=!0,c=!1;try{if(r=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(a=r.call(n)).done)&&(s.push(a.value),s.length!==t);l=!0);}catch(e){c=!0,i=e}finally{try{if(!l&&null!=n.return&&(o=n.return(),Object(o)!==o))return}finally{if(c)throw i}}return s}}(e,t)||function(e,t){if(e){if("string"==typeof e)return x(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?x(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function x(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}const A=function(){var e=k((0,a.useState)(""),2),t=e[0],n=e[1],i=k((0,a.useState)(""),2),r=i[0],o=i[1],s=k((0,a.useState)(""),2),l=s[0],c=s[1],m=k((0,a.useState)(""),2),d=m[0],u=m[1],h=k((0,a.useState)(""),2),p=h[0],g=h[1];return(0,a.useEffect)((function(){n("## About\n\nShou-Li Hsu is a digital circuit designer from Taiwan, specializing in CPU RTL design and transistor-level VLSI. With expertise in mmWave IC, cell-based digital IC, and full-custom digital IC, he excels in handling complex circuit design challenges. Shou-Li is also the founder of [Circuit Cove](https://circuitcove.com/), a tutorial website dedicated to helping enthusiasts and professionals master circuit design.\n\nShou-Li earned his bachelor's degree from National Taiwan University in 2019 and completed his master's degree at the University of Michigan in 2022. He has gained valuable industry experience through internships at MemryX Inc. and Tron Future Tech. Currently, he works on CPU RTL design at Intel in Hillsboro, OR, USA, where he continues to hone his skills.\n\nAs the founder of Circuit Cove, Shou-Li is passionate about sharing his knowledge and expertise with others. He provides a wealth of resources, tutorials, and guidance on circuit design. Additionally, he actively contributes to open source projects, including tools for SystemVerilog, fostering a community of well-informed designers.\n"),o('## Work Experience\n\n### Intel Corporation\n\n<div class="info-container">\n  <div class="info-item">\n    <span role="img" aria-label="position">🛠️</span> CPU RTL Design Engineer\n  </div>\n  <div class="info-item">\n    <span role="img" aria-label="location">📍</span> Hillsboro, OR, USA\n  </div>\n  <div class="info-item">\n    <span role="img" aria-label="date">⏳</span> June 2022 – Present\n  </div>\n</div>\n\nShou-Li focuses on the design and implementation of the L0 and L1 cache, prefetcher, and machine check architecture for x86 CPUs. He ensures that these components meet stringent timing and power requirements, working collaboratively with a team to achieve high performance and efficiency. His role involves detailed microarchitectural planning and execution to meet project specifications.\n\n### MemryX Inc\n\n<div class="info-container">\n  <div class="info-item">\n    <span role="img" aria-label="position">🛠️</span> IC Design Intern\n  </div>\n  <div class="info-item">\n    <span role="img" aria-label="location">📍</span> Hsinchu, Taiwan\n  </div>\n  <div class="info-item">\n    <span role="img" aria-label="date">⏳</span> May 2021 – Aug. 2021\n  </div>\n</div>\n\nAt MemryX, Shou-Li optimized the microarchitecture of deep learning layers in an AI core, achieving a 50% area reduction by leveraging specific microarchitectural properties. He integrated the AI core, ARM Cortex-M3 processor, and peripherals into an SoC and performed comprehensive chip-level verification, which involved using JTAG to manipulate the CPU and the AI core for debugging.\n\n### Tron Future Tech\n\n<div class="info-container">\n  <div class="info-item">\n    <span role="img" aria-label="position">🛠️</span> Digital Design Intern\n  </div>\n  <div class="info-item">\n    <span role="img" aria-label="location">📍</span> Hsinchu, Taiwan\n  </div>\n  <div class="info-item">\n    <span role="img" aria-label="date">⏳</span> June 2020 – Nov. 2020\n  </div>\n</div>\n\nAt Tron Future Tech, Shou-Li integrated a space communication IP into a phased array transmitter system. He researched and integrated the provided communication IP, which included ECC and encryption modules, ensuring seamless operation with modulation and other digital controllers. Shou-Li managed the entire FPGA development process, including synthesis, implementation, bitstream generation, and power-up testing, ensuring the system\'s functionality and reliability for space applications. Additionally, he researched and applied single-event upset (SEU) solutions from Xilinx and triple module redundancy features from Synopsys synthesis tools to enhance system resilience.\n'),c('## Education\n\n### University of Michigan\n\n<div class="info-container">\n  <div class="info-item">\n    <span role="img" aria-label="education">🎓</span> Master\'s\n  </div>\n  <div class="info-item">\n    <span role="img" aria-label="location">📍</span> Ann Arbor, MI, USA\n  </div>\n  <div class="info-item">\n    <span role="img" aria-label="date">⏳</span> Sept. 2020 – Apr. 2022\n  </div>\n</div>\n\nMajor in Electrical and Computer Engineering. Graduated with a GPA of 3.9/4.0. Coursework focused on modern computer architecture, digital circuit layout, application-specific circuits, and compilers.\n\n### National Taiwan University\n\n<div class="info-container">\n  <div class="info-item">\n    <span role="img" aria-label="education">🎓</span> Bachelor\'s\n  </div>\n  <div class="info-item">\n    <span role="img" aria-label="location">📍</span> Taipei, Taiwan\n  </div>\n  <div class="info-item">\n    <span role="img" aria-label="date">⏳</span> Sept. 2014 – June 2019\n  </div>\n</div>\n\nDouble major in Electrical Engineering and Mechanical Engineering. Graduated with a GPA of 3.8/4.3. Completed research projects including robotics, millimeter-wave mixer, and AES circuit design. Served as Administrator for the Taichung Alumni Association, demonstrating leadership and organizational skills.\n'),u("## Skills and Expertise\n\n### RTL Design\n\nFocuses on writing clean, maintainable, extensible, and scalable code with the application of software design patterns to hardware design. Utilizes modern software practices such as test-driven development, continuous integration, unit testing, and agile methodologies to ensure high-quality RTL designs.\n\n### RTL Design Efficiency\n\nDeveloped workflows to address SystemVerilog limitations and accelerate the design process using open source tools. Developed SystemVerilog syntax highlighters and language servers for VS Code extensions to improve the development experience.\n\n### Programming Languages Design\n\nHolds a deep interest in the philosophy and principles behind language design, understanding the evolution of software languages, and exploring potential improvements for hardware description languages. Experience with SystemVerilog parser development, critically analyzing its limitations to drive innovation in hardware design methodologies.\n\n### Education and Mentorship\n\nAs the author of Circuit Cove, a website dedicated to circuit design tutorials, provides comprehensive tutorials on SystemVerilog and related topics.\n"),g("## Open Source Projects\n\n### Better SystemVerilog Syntax\n\n[Better SystemVerilog Syntax](https://github.com/hankhsu1996/vscode-better-systemverilog-syntax) provides advanced tmLanguage grammar support, aimed at enhancing SystemVerilog syntax highlighting. To ensure robustness, extensive study of the SystemVerilog Language Reference Manual (LRM) was conducted to accurately capture the complexities of the SystemVerilog language.\n\n[JSON-RPC 2.0 Modern C++ Library](https://github.com/hankhsu1996/jsonrpc-cpp-lib) is a lightweight, modern C++ implementation of JSON-RPC 2.0 servers and clients. Designed for flexibility, this library seamlessly integrates with various transport layers, making it simple to register methods and notifications while efficiently binding them to client logic.\n")}),[]),a.createElement("div",{className:"site-content"},a.createElement("main",{className:"site-main"},a.createElement("div",{className:"post-content gh-content kg-canvas"},a.createElement("div",{className:"about"},a.createElement(S.o,{rehypePlugins:[N.A]},t)),a.createElement("div",{className:"work"},a.createElement(S.o,{rehypePlugins:[N.A]},r)),a.createElement("div",{className:"education"},a.createElement(S.o,{rehypePlugins:[N.A]},l)),a.createElement("div",{className:"skills"},a.createElement(S.o,{rehypePlugins:[N.A]},d)),a.createElement("div",{className:"projects"},a.createElement(S.o,{rehypePlugins:[N.A]},p)))))},C=JSON.parse('[{"name":"github","href":"https://github.com/hankhsu1996/","title":"GitHub","icon":"fa-github","iconSize":"20px","iconPaddingBottom":"1pt","iconColor":"#181717","iconTextSpacing":"6px"},{"name":"linkedin","href":"https://www.linkedin.com/in/hankhsu1996/","title":"LinkedIn","icon":"fa-linkedin","iconSize":"22px","iconPaddingBottom":"0.5pt","iconColor":"#0a66c2","iconTextSpacing":"6px"},{"name":"facebook","href":"https://www.facebook.com/hankhsu1996/","title":"Facebook","icon":"fa-facebook","iconSize":"21px","iconPaddingBottom":"1.5pt","iconColor":"#1778F2","iconTextSpacing":"6px"}]');var L=function(){var e=C.map((function(e){return a.createElement("a",{key:e.name,href:e.href,target:"_blank",className:"subscribe-link"},a.createElement(m.g,{icon:["fa-brands",e.icon],className:"icon icon-".concat(e.name),style:{fontSize:e.iconSize,paddingBottom:e.iconPaddingBottom,color:e.iconColor}}),a.createElement("span",{className:"subscribe-text",style:{marginLeft:e.iconTextSpacing}},e.title))}));return a.createElement("div",{className:"subscribe"},e)},j=function(){return a.createElement("div",{className:"copyright"},a.createElement("p",null,"Shou-Li Hsu © 2024"),a.createElement("p",null,"Theme by"," ",a.createElement("a",{href:"https://github.com/TryGhost/Wave",target:"_blank"},"Ghost")))};const T=function(){return a.createElement("footer",{className:"site-footer container medium"},a.createElement(L,null),a.createElement(j,null))},I=function(){return a.createElement(a.Fragment,null,a.createElement(E,null),a.createElement(w,null),a.createElement(A,null),a.createElement(T,null))},M=function(e){var t=a.useRef(null),n="".concat(e.className," lazyload"),i=new Date;return a.createElement("div",{ref:t},a.createElement(b.LazyLoadImage,{className:n,src:e.src,alt:e.alt,afterLoad:function(){var n=new Date-i,a=e.minDelay||0,r=Math.max(a-n,0);setTimeout((function(){var e=t.current.children[0];e.classList.remove("lazyload"),e.classList.add("lazyloaded")}),r)}}))},P=n.p+"images/0da897a1f1079e4d2aa0bc37e811c999-author.jpg",D=function(){return a.createElement("div",{className:"term-author"},a.createElement("section",{className:"author"},a.createElement("div",{className:"author-image-placeholder u-placeholder"},a.createElement(M,{className:"author-image u-object-fit ls-is-cached",src:P,alt:"Shou-Li Hsu",minDelay:300})),a.createElement("div",{className:"author-wrapper"},a.createElement("header",{className:"author-header"},a.createElement("h4",{className:"author-name"},"Shou-Li Hsu")),a.createElement("span",{className:"author-meta"},"Intel CPU Design Engineer "),a.createElement("div",{className:"author-bio"},"Here are some of the projects I've worked on."))))},O=function(e){var t=e.data,n=t.title,i=t.excerpt,o=t.date,s=t.tag,l=t.img_src,c=t.link;return a.createElement("article",{className:"post tag-technology"},a.createElement("div",{className:"post-media js-play"},a.createElement("div",{className:"u-placeholder square"},a.createElement(M,{className:"post-image u-object-fit lazyautosizes ls-is-cached",src:l,alt:n,minDelay:50}))),a.createElement("div",{className:"post-wrapper"},a.createElement("header",{className:"post-header"},a.createElement("h2",{className:"post-title"},a.createElement(r.N_,{className:"post-title-link",to:c},n)),a.createElement("div",{className:"post-meta"},a.createElement("span",{className:"post-meta-item post-meta-date"},a.createElement("time",{dateTime:o},new Date(o).toLocaleString("en-US",{year:"numeric",month:"short",day:"numeric"}))),a.createElement("span",{className:"post-meta-item post-meta-tags"},a.createElement(r.N_,{className:"post-tag post-tag-technology",to:"/tag/".concat(s.toLowerCase()),title:s},s)))),a.createElement("div",{className:"post-excerpt"},i),a.createElement("footer",{className:"post-footer"})))},_=JSON.parse('[{"title":"Desktop Laser Engraver","excerpt":"A lightweight desktop laser engraver made with Arduino Mega and 3D-printed parts. The firmware is adopted from the Marlin firmware.","date":"2017-08-31","tag":"Robot","img_src":"https://source.unsplash.com/ekK_kGLeTQA","link":""},{"title":"Hexapod Robot Gait Development","excerpt":"This undergraduate research project focuses on developing a hexapod robot gait. A new flip-and-jump gait is proposed, which enables the robot to overcome obstacles with ease.","date":"2018-07-31","tag":"Robot","img_src":"https://source.unsplash.com/GNk9IAiIvrg","link":""},{"title":"FountainScape Drawing Robot","excerpt":"This numerical control drawing robot can draw 2D SVG files and has an intuitive web interface, ideal for artists, designers, and hobbyists who require precision drawings.","date":"2018-06-30","tag":"Robot","img_src":"https://source.unsplash.com/l3N9Q27zULw","link":""},{"title":"Ka-Band IQ Mixer in GaAs Process","excerpt":"A GaAs pHEMT-based Ka-band IQ mixer is designed to decrease image noise in the ngVLA radio telescope. The chip is taped-out in Jan. 2020.","date":"2019-07-31","tag":"Analog","img_src":"https://source.unsplash.com/fsH1KjbdjE8","link":""},{"title":"AES Algorithm Hardware Accelerator","excerpt":"A UMC 0.18 process-taped hardware accelerator is designed for the Advanced Encryption Standard algorithm. It supports both ECB and CBC modes.","date":"2019-06-30","tag":"Digital","img_src":"https://source.unsplash.com/BcjdbyKWquw","link":""},{"title":"Classic Five-Stage RISC-V Processor","excerpt":"A classic RV32I RISC-V processor with data forwarding unit is synthesized using Design Compiler. The processor features a five-stage pipeline and is implemented in SystemVerilog.","date":"2020-11-30","tag":"Digital","img_src":"https://source.unsplash.com/d21CGQKtJh8","link":""},{"title":"Superscalar Dynamically-Scheduled RISC-V Processor","excerpt":"A SystemVerilog-written RISC-V processor ranked 1st in class, features a two-way superscalar, dynamically-scheduled design with MIPS R10000 style register renaming.","date":"2020-12-31","tag":"Digital","img_src":"https://source.unsplash.com/RBthQZJd_vU","link":""},{"title":"Full-Custom Layout RISC Processor","excerpt":"A RISC processor featuring a full-custom register file, ALU, and barrel shifter is designed with Cadence Virtuoso\'s schematic and layout tools.","date":"2021-04-20","tag":"Digital","img_src":"https://source.unsplash.com/M0yAcynJr6M","link":""},{"title":"MOESI Cache-Coherence Protocol Verification","excerpt":"The MOESI cache-coherence protocol is formally verified using the Murphi model checker.","date":"2021-03-31","tag":"Digital","img_src":"https://source.unsplash.com/eaDwf4UAEhk","link":""},{"title":"Murphi VS Code Language Extension","excerpt":"The Murphi model checker language is extended with syntax highlighting and code completion through the VS Code language extension.","date":"2021-02-28","tag":"Software","img_src":"https://source.unsplash.com/_yMciiStJyY","link":""},{"title":"Snake Language Compiler","excerpt":"A Rust-written compiler for the Snake language supports the register allocation algorithm and first-class function feature.","date":"2021-12-10","tag":"Software","img_src":"https://source.unsplash.com/BfrQnKBulYQ","link":""},{"title":"Soft-Decision Decoder for Turbo Product Code","excerpt":"A soft-decision decoder for the turbo product code and staircase code forward error correction. The decoder is implemented in SystemVerilog.","date":"2021-12-15","tag":"Digital","img_src":"https://source.unsplash.com/FnA5pAzqhMM","link":""},{"title":"Side-Channel Attack Resistant AES SoC","excerpt":"The project aims to design a secure AES system-on-chip (SoC) with a stacked-voltage domain backend design, providing resistance to power side-channel attacks. Special features such as a digital LDO and level shifter will further enhance the system\'s security.","date":"2022-04-20","tag":"Digital","img_src":"https://source.unsplash.com/t2fKRcKF3fw","link":""},{"title":"Radio Receiver Design","excerpt":"The project aims to integrate a low-noise amplifier, Gilbert cell mixer, and voltage-controlled resonant oscillator into an IBM 130 process, producing an analog radio receiver operating at 1.7-1.8 GHz.","date":"2022-04-30","tag":"Analog","img_src":"https://source.unsplash.com/tkE5nutsKt8","link":""},{"title":"Personal Website","excerpt":"A sleek and modern single-page application website created using React and Webpack, and hosted on GitHub Pages for easy access.","date":"2022-05-19","tag":"Software","img_src":"https://source.unsplash.com/7okkFhxrxNw","link":""}]'),R=function(){return a.createElement(a.Fragment,null,a.createElement(E,null),a.createElement("div",{className:"site-content"},a.createElement("div",{className:"content-area"},a.createElement("main",{className:"site-main container medium"},a.createElement(D,null),a.createElement("div",{className:"post-feed"},_.sort((function(e,t){return new Date(t.date)-new Date(e.date)})).map((function(e){return a.createElement(O,{data:e,key:e.title})})))))),a.createElement(T,null))},H=function(){var e=(0,o.g)(),t=_.filter((function(t){return t.tag.toLowerCase()===e.tag})),n="Tag: ".concat(e.tag),i=0===t.length?"There are no projects with the tag ".concat(e.tag,"."):"All projects tagged with ".concat(e.tag,".");return a.createElement(a.Fragment,null,a.createElement(E,null),a.createElement("div",{className:"site-content"},a.createElement("div",{className:"content-area"},a.createElement("main",{className:"site-main container medium"},a.createElement("section",{className:"term"},a.createElement("h1",{className:"term-name"},n),a.createElement("div",{className:"term-description"},i)),a.createElement("div",{className:"post-feed"},t.sort((function(e,t){return new Date(t.date)-new Date(e.date)})).map((function(e){return a.createElement(O,{data:e,key:e.title})})))))),a.createElement(T,null))};var z=function(){return a.createElement("header",{className:"contact-header container medium"},a.createElement("h1",{className:"contact-title"},"Let's work together!"),a.createElement("p",{className:"contact-subtitle"},"Tell me about your project, or just say hi!"))},V=function(){return a.createElement("div",{className:"mail-me-wrap"},a.createElement("a",{className:"mail-me",target:"_blank",href:"mailto:hankhsu@umich.edu"},a.createElement("div",{className:"icon-wrap"},a.createElement(m.g,{className:"icon",icon:["far","envelope"]})),a.createElement("div",{className:"mail-me-text"},a.createElement("p",null,"Mail me at"),a.createElement("p",{className:"email"},"hankhsu@umich.edu"))))};const U=function(){return a.createElement("div",{className:"site-content"},a.createElement("div",{className:"content-area"},a.createElement("main",{className:"site-main"},a.createElement(z,null),a.createElement(V,null))))},F=function(){return a.createElement(a.Fragment,null,a.createElement(E,null),a.createElement(U,null),a.createElement(T,null))},G=function(){return a.createElement("div",{className:"container u-flex1 u-align-vertical"},a.createElement("div",{className:"site-cover-404"},a.createElement("div",{className:"cover-content"},a.createElement("div",{className:"cover-logo"},a.createElement(u,{clickable:"false",color:"dark",size:"lg"},"404")),a.createElement("div",{className:"cover-description"},a.createElement("h2",null,"Page Not Found"),a.createElement("p",null,"Sorry, the page you are looking for does not exist.")))))},B=function(){return a.createElement(a.Fragment,null,a.createElement(E,null),a.createElement(G,null),a.createElement(T,null))};s.Yv.add(l.Cvc,c.C91);const J=function(){return a.createElement(r.Kd,null,a.createElement(o.BV,null,a.createElement(o.qh,{exact:!0,path:"/",element:a.createElement(I,null)}),a.createElement(o.qh,{exact:!0,path:"/projects",element:a.createElement(R,null)}),a.createElement(o.qh,{exact:!0,path:"/contact",element:a.createElement(F,null)}),a.createElement(o.qh,{exact:!0,path:"/tag/:tag",element:a.createElement(H,null)}),a.createElement(o.qh,{path:"*",element:a.createElement(B,null)})))};i.H(document.getElementById("root")).render(a.createElement(a.StrictMode,null,a.createElement(J,null)))}},i={};function r(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return a[e].call(n.exports,n,n.exports,r),n.exports}r.m=a,e=[],r.O=(t,n,a,i)=>{if(!n){var o=1/0;for(m=0;m<e.length;m++){for(var[n,a,i]=e[m],s=!0,l=0;l<n.length;l++)(!1&i||o>=i)&&Object.keys(r.O).every((e=>r.O[e](n[l])))?n.splice(l--,1):(s=!1,i<o&&(o=i));if(s){e.splice(m--,1);var c=a();void 0!==c&&(t=c)}}return t}i=i||0;for(var m=e.length;m>0&&e[m-1][2]>i;m--)e[m]=e[m-1];e[m]=[n,a,i]},r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,r.t=function(e,a){if(1&a&&(e=this(e)),8&a)return e;if("object"==typeof e&&e){if(4&a&&e.__esModule)return e;if(16&a&&"function"==typeof e.then)return e}var i=Object.create(null);r.r(i);var o={};t=t||[null,n({}),n([]),n(n)];for(var s=2&a&&e;"object"==typeof s&&!~t.indexOf(s);s=n(s))Object.getOwnPropertyNames(s).forEach((t=>o[t]=()=>e[t]));return o.default=()=>e,r.d(i,o),i},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.p="/",(()=>{var e={57:0};r.O.j=t=>0===e[t];var t=(t,n)=>{var a,i,[o,s,l]=n,c=0;if(o.some((t=>0!==e[t]))){for(a in s)r.o(s,a)&&(r.m[a]=s[a]);if(l)var m=l(r)}for(t&&t(n);c<o.length;c++)i=o[c],r.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return r.O(m)},n=self.webpackChunkhankhsu1996_github_io=self.webpackChunkhankhsu1996_github_io||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var o=r.O(void 0,[985],(()=>r(334)));o=r.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,